#!/usr/bin/env perl
# Copyright 2017 Frank Breedijk, Alex Smirnoff, Glenn ten Cate, Artien Bel, Theodoor Scholte
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ------------------------------------------------------------------------------

use strict;
use warnings;
use SeccubusV2;
use Seccubus::IVIL;

use Getopt::Long;
use Carp;

use JSON;
use Data::Dumper;
use LWP::UserAgent;


my (
    $api,
    $nodelete,
    $help,
    $quiet,
    $sleep,
    $verbose,
    $sslcheck,
    $retries,
    $hosts_file,
    $workspace,
    $scan,
    $access_key,
    $secret_key,
    $policy_name,
    $r,
    $policy,
    $cmd,
    $scanner_name,
    @export,
);

# Default values for command line values
$help = 0;
$quiet = 0;
$sleep = 30;
$verbose = 0;
$sslcheck=1;
$retries = 3;
$api = "https://cloud.tenable.com";

GetOptions(
    'api|a=s'           => \$api,
    'accesskey=s'       => \$access_key,
    'secretkey=s'       => \$secret_key,
    'hosts|h=s'         => \$hosts_file,
    'workspace|ws=s'    => \$workspace,
    'scan|sc=s'         => \$scan,
    'sleep=s'           => \$sleep,
    'nodelete'          => \$nodelete,
    'sslcheck!'         => \$sslcheck,
    'retries'           => \$retries,
    'verbose|v+'        => \$verbose,
    'quiet|q!'          => \$quiet,
    'help'              => \$help,
    'policy|pol=s'      => \$policy_name,
    'export=s'          => \@export,
    'scanner=s'         => \$scanner_name,
);

help() if $help;
$verbose = 0 if $quiet;

my @formats = qw(nessus html pdf);
if ( @export ) {
    @formats = ();
    foreach my $format ( @export ) {
        if ( $format =~ /^(nessus|html|pdf|csv|db)$/ ) {
            unshift @formats, $format;
        } else {
            print "Ignoring invalid export format $format\n" unless $quiet;
        }
    }
}
my $nessus_format_found=0;
foreach my $format ( @formats ) {
    if ( $format eq "nessus") {
        $nessus_format_found = 1;
        last;
    }
}
unless ( $nessus_format_found ) {
    print STDERR "You need to at least export the scan in nessus format";
    help();
}

if ( ! $hosts_file ) {
    print "You must specify a valid hosts spec";
    help();
} elsif ( ! $access_key ) {
    print "You must specify an access key";
    help();
} elsif ( ! $secret_key ) {
    print "You must specify a secret key";
    help();
} elsif ( ! $policy_name ) {
    print "You must specify a policy";
    help();
} elsif ( ! $workspace ) {
    print "You must specify a workspace name";
    help();
} elsif ( ! $scan ){
    print "You must specify a scan name";
    help();
};

my $timestamp = make_timestamp();
print "Timestamp = $timestamp\n" if $verbose > 1;
my $tempscan = "seccubus.$workspace.$scan";
my $tempfile = "/tmp/$tempscan.$$";

my $config = get_config();
my $nessus2ivil = "perl -I$config->{paths}->{modules} $config->{paths}->{bindir}\/nessus2ivil";
my $load_ivil = "perl -I$config->{paths}->{modules} $config->{paths}->{bindir}\/load_ivil";
my $attach_file = "perl -I$config->{paths}->{modules} $config->{paths}->{bindir}\/attach_file";

my $json = {};
login();

$json = rest_get("/policies",undef,\$r);
die "Cannot get policy list" if ($r->code() != 200);

my $tuuid;
my $pid = -1;

foreach my $policy ( @{$json->{'policies'}} ) {
    if ( $policy->{'name'} eq $policy_name ) {
        $tuuid = $policy->{'template_uuid'};
        $pid = $policy->{id};
        print "Policy found, tuuid = $tuuid, id = $pid\n" if $verbose;
        last;
    }
}

unless ( $tuuid ) {
    $json = rest_get("/editor/policy/templates",undef,\$r);
    die "Cannot get tempalte list" if ($r->code() != 200);
    foreach my $template ( @{$json->{'templates'}} ) {
        if ( $template->{name} eq $policy_name || $template->{'title'} eq $policy_name ) {
            $tuuid = $template->{uuid};
            print "Template found, tuuid = $tuuid\n" if $verbose;
            last;
        }
    }
}


if (!$tuuid && !$pid) {
    confess("Unable to find a policy or template named '$policy_name'");
}

my $scanner_id;
if ( $scanner_name ) {
    $json = rest_get("/scanners",undef,\$r);
    die "Cannot get scanner list" if ($r->code() != 200);

    foreach my $scanner ( @{$json->{scanners}}) {
        if ( $scanner->{name} eq $scanner_name ) {
            print "Scanner '$scanner_name' found, id: $scanner->{id}\n" if $verbose > 1;
            $scanner_id = $scanner->{id};
            last;
        }
    }
    confess("Could not find scanner '$scanner_name'") unless $scanner_id;
}

# Read target list
my $target_list = $hosts_file;
if ( -e $hosts_file ) {         # Assume its a host spect rather then a
                                # hosts file if there is no file
    open(my $FILE,"<",$hosts_file) or die "Cannot read hosts file";
    my @list;
    while (<$FILE>) {
        chomp;
        s/\#.*$//; # Strip comments
        chomp;
        if ( $_ ) {
            push @list, $_;
        }
    }
    close($FILE);
    $target_list = join ", ", @list;
}

$json = rest_get('/scans',undef,\$r);
my $sid;
foreach my $scan ( @{$json->{scans}} ) {
    if ( $scan->{name} eq $tempscan ) {
        $sid = $scan->{id};
        print "Found scan '$tempscan', id : $sid\n" if $verbose;
        last;
    }
}

if ( $sid ) {
    $json = rest_get("/scans/$sid");
    die "Cannot read scan $sid" if ($r->code() != 200);

    print "Previous scan found, updating\n" if $verbose;

    if  (
            ( $json->{info}->{targets} ne $target_list ) ||
            ( $scanner_id && ( $json->{info}->{scanner_name} ne $scanner_name ) )
        )
    {
        print "Targets from server  : $json->{info}->{targets}\n" if $verbose;
        print "Targets from seccubus: $target_list\n" if $verbose;
        $json->{settings}->{text_targets} = $target_list;
        print "Scanner from server  : $json->{info}->{scanner_name}\n" if $verbose;
        print "Scanner from seccubus: $scanner_name\n" if $verbose;
        $json->{settings}->{scanner_id} = $scanner_id;

        $json = rest_put("/scans/$sid",encode_json($json),\$r);
        die "Cannot update scan" if ($r->code() != 200);
        print "Updated scan $sid\n" if $verbose;
    }
} else {
    print "Scan doesn't exist yet, creating\n" if $verbose;
    my $scandata = {
        'uuid'          => $tuuid,
        'settings'      => {
            'name'          => $tempscan,
            'description'   => 'Seccubus automated scan',
            'launch'        => 'ON_DEMAND',
            'text_targets'  => $target_list
        }
    };
    if ( $pid != -1 ) {
        $scandata->{settings}->{policy_id} = $pid;
    }
    $json = rest_post("/scans",encode_json($scandata),\$r);
    die "Cannot update scan" if ($r->code() != 200);

    $sid = $json->{scan}{id};
    print "Created scan $sid\n" if $verbose;

}

$json = rest_post("/scans/$sid/launch",{},\$r);
die "Cannot launch scan" if ($r->code() != 200);

my $launched = $json->{scan_uuid};
print "Launched scan $launched\n" if $verbose;


$json = rest_get("/scans/$sid", {}, \$r);
my $hid;

for my $history (@{$json->{history}} ) {
    if ($history->{uuid} eq $launched) {
        $hid = $history->{history_id};
    }
}

if ($hid) {
    print "Found history id $hid for scan $launched\n" if $verbose;
} else {
    die "Cannot find history id for scan $launched";
}

do {
    print "Sleeping for $sleep seconds\n" if $verbose > 2;
    sleep($sleep);
    $json = rest_get("/scans/$sid", { 'history_id' => $hid }, \$r);

    if ($r->code() eq 200) {
        my $vulncount = @{$json->{vulnerabilities}};
        print "Scan status: $json->{info}->{status}. $vulncount findings on $json->{info}->{hostcount} host(s).\n" if $verbose;
    } else {
        die "Scan status request returned " . $r->code();
    }
} until ($json->{info}->{status} eq "completed" || $json->{info}->{status} eq "canceled" || $json->{info}->{status} eq "aborted" );

foreach my $format ( @formats ) {
    print "Exporting report in $format format\n" unless $quiet;

    my $exportdata = {
        'format'    => $format,
        'chapters'  => "vuln_hosts_summary;vuln_by_host;compliance_exec;remediations;vuln_by_plugin;compliance",
    };

    $json = rest_post("/scans/$sid/export?history_id=$hid", encode_json($exportdata), \$r);

    if ( $r->code == 200 ) {
        my $filehandle=$json->{file};
        print "Initiated scan export to file $filehandle\n" if $verbose;

        do {
            sleep(5);
            $json = rest_get("/scans/$sid/export/$filehandle/status", {}, \$r);

            #$json will be undefined if trying to export a fileformat will fail
            if (!defined $json) {
                print "Exporting scan to $format failed, skipping\n";
                last;
            }

            if ($r->code() eq 200) {
                print "Scan export status: $json->{status}\n";
            } else {
                print "Scan export status request returned " . $r->code() if $verbose;
            }
        } until ($json->{status} eq 'ready');

        rest_get("/scans/$sid/export/$filehandle/download", {}, \$r,1 ); # This call doesn't return json, but a file

        die "Cannot download report" if ($r->code() != 200);
        print "Report downloaded, saving $filehandle to $tempfile.$format\n" if $verbose;
        open( my $FILE, ">", "$tempfile.$format") or die "Cannot save report";
        print $FILE $r->decoded_content();
        close $FILE;

    } else {
        print "Could not initiate export in $format format, skipping.\n" if ($r->code() != 200 && ! $quiet);
    }
}

rest_delete("/scans/$sid/history/$hid",{},\$r);
die "Cannot delete report" if ($r->code() != 200);
print "Report deleted from server\n" if $verbose;

rest_delete("/scans/$sid" , {}, \$r);
die "Cannot delete scan" if ($r->code() != 200);
print "Scan deleted from server\n" if $verbose;

print "Converting $tempfile.nessus to $tempfile.ivil.xml\n" unless $quiet;
$cmd = "$nessus2ivil --infile '$tempfile.nessus'";
$cmd .= " -v" if $verbose > 1;
print "Executing $cmd\n" if $verbose > 1;
my $result = `$cmd 2>&1`;
print "$result\n" if $verbose > 1;

print "Importing ivil\n" unless $quiet;
$cmd = "$load_ivil --workspace '$workspace' --scan '$scan' --scanner tenable.io --timestamp $timestamp";
$cmd .= " -v" if $verbose > 1;
$cmd .= " '$tempfile.ivil.xml'";
print "Executing $cmd\n" if $verbose > 1;
$result = `$cmd 2>&1`;
print "$result\n" if $verbose > 1;

print "Scan imported, adding files to scan $scan in workspace $workspace\n" unless $quiet;
foreach my $format ( @formats, "ivil.xml") {
    if ( -e "$tempfile.$format" ) {
        print "Attaching file $tempfile.$format to scan\n" if $verbose;
        $cmd = "$attach_file --workspace '$workspace' --scan '$scan' --timestamp $timestamp --file '$tempfile.$format' --description '$format output'";
        $cmd .= " -v" if $verbose > 1;
        print "Executing $cmd\n" if $verbose > 1;
        $result = `$cmd 2>&1`;
        print "$result\n" if $verbose > 1;
    }
}

# Cleanup
unless ( $nodelete ) {
    foreach my $format ( @formats, "ivil.xml") {
        if ( -e "$tempfile.$format" ) {
            print "Deleting $tempfile.$format\n" if $verbose >1;
            unlink "$tempfile.$format";
        }
    }
}

print "Done\n" unless $quiet;

exit(0);

sub help {
    print "
Usage: scan       --policy=<policy name> --hosts=<hosts file|hosts spec>    \\
                  --workspace=<seccubus workspace> --scan=<seccubus scan>   \\
                  --accesskey=<tennable.io access API key>                  \\
                  --secretkey =<tenable.io secret API key>                  \\
                  [--scanner=<scanner name>] [--api=<url>]                  \\
                  [--export=(nessus|html|pdf|csv|db)] [--nodelete]          \\
                  [--sleep=<seconds>] [--nosslcheck] [--retries=<attempts>] \\
                  [--verbose] [--quiet] [--help]
--policy          - Name of policy or template to use for this scan
--hosts           - Specification of hosts to scan. Follows the tenable.io
                    rules for specifying hosts, or path to a file containing
                    such specification
--accesskey       - API access key to log into tennable.io. You can generate
                    this key via Settings->My Account->API-Leys
                    (https://cloud.tenable.com/app.html#/settings/my-account/api-keys)
--secretkey       - API secret key to log into tennable.io. (See accesskey)
--scanner         - Name of the scanner to use for this scan.
--workspace (-ws) - Seccubus workspace the scan in in
--scan (-sc)      - Seccubus scan the data should be saved in
--api             - Can be used to overwrite the url of the tennable.io API
--export          - Export the scan in these formats (specify more then once
                    for more formats), currently supported formats are:
                    nessus, html, pdf, csv, db.
--nodelete        - Don't erase temporary files
--nosslcheck      - Don't validate tenable.io' TLS certificate Common Name
                    (default: true when port is 8834 false when port is 443)
--retries         - How many times should rest calls be retried before aborting
                    the scan (default=3)
--sleep           - Seconds to sleep between polls of the tennable.io engine
                    (default=30)
--verbose (-v)    - Be verbose during execution
--quiet (-q)      - Don't print output
--help (-h)       - Print this message
";
    exit(1);
}

sub make_timestamp {
    my ($second, $minute, $hour, $day, $month, $year) = localtime();
    $month++;
    $second = "0" . $second if $second < 10;
    $minute = "0" . $minute if $minute <10;
    $hour = "0". $hour if $hour < 10;
    $day = "0". $day if $day <10;
    $month = "0" . $month if $month <10;
    $year += 1900;

    return "$year$month$day$hour$minute$second";
}

sub login {
    my $r;
    my $json = rest_get("/session", {}, \$r, undef, 0);

    confess "Cannot authenticate to scanner.\nReturn code: " . $r->code() . "\nMessage: " . $r->decoded_content() . " " unless $r->is_success;

    print "Authenticated\n" if $verbose;

}

sub rest_get {
    my $uri = shift;
    my $params = shift;
    my $response = shift;
    my $nojson = shift;
    my $localretry = shift;

    $localretry = $retries unless defined $localretry;
    rest_call("get",$uri,$params,$response,$nojson,$localretry);
}

sub rest_post {
    my $uri = shift;
    my $params = shift;
    my $response = shift;
    my $nojson = shift;
    my $localretry = shift;

    $localretry = $retries unless defined $localretry;
    rest_call("post",$uri, $params,$response,$nojson,$localretry);
}

sub rest_put {
    my $uri = shift;
    my $params = shift;
    my $response = shift;
    my $nojson = shift;
    my $localretry = shift;

    $localretry = $retries unless defined $localretry;
    rest_call("put",$uri, $params,$response,$nojson,$localretry);
}

sub rest_delete {
    my $uri = shift;
    my $params = shift;
    my $response = shift;
    my $nojson = shift;
    my $localretry = shift;

    $localretry = $retries unless defined $localretry;
    rest_call("delete",$uri, $params,$response,$nojson,$localretry);
}

sub rest_call {
    my $method = shift;
    my $uri = shift;
    my $param = shift;
    my $response = shift;
    my $nojson = shift;
    my $retries = shift;

    $ENV{PERL_LWP_SSL_VERIFY_HOSTNAME} = 0 unless $sslcheck;
    my $ua = LWP::UserAgent->new();
    $ua->ssl_opts( SSL_verify_mode => 0 ) unless $sslcheck;
    $ua->agent("Seccubus $SeccubusV2::VERSION ");

    $ua->default_header('Content-Type' => 'application/json');
    $ua->default_header('Accept' => 'application/json');

    # Authentication
    $ua->default_header('X-ApiKeys' => "accessKey=$access_key; secretKey=$secret_key");

    # Disable max return size
    $ua->max_size(undef);

    my $r;
    if ( $method eq "post" ) {
        if ( $verbose > 1 ) {
            print "POST to $api$uri\nParams:\n";
            print Dumper $param;
        }
        if ( ref $param ) {
            $r = $ua->post("$api$uri", $param);
        } else {
            my $req = HTTP::Request->new(POST => "$api$uri");
            $req->content_type('application/json');
            $req->content($param);

            $r = $ua->request($req);
        }
    } elsif ( $method eq "put" ) {
        if ( $verbose > 1 ) {
            print "PUT to $api$uri\nParams:\n";
            print Dumper $param;
        }
        if ( ref $param ) {
            $r = $ua->put("$api$uri", $param);
        } else {
            my $req = HTTP::Request->new(PUT => "$api$uri");
            $req->content_type('application/json');
            $req->content($param);

            $r = $ua->request($req);
        }
    } elsif ( $method eq "get" ) {
        my $geturi = "$uri?";
        foreach my $key ( sort keys %$param ) {
            $geturi .= $key . "=" . $param->{$key} . "&";
        }
        $geturi =~ s/\&$//;
        print "GET to $api$geturi\n" if $verbose > 1;
        $r = $ua->get("$api$geturi");
    } elsif ( $method eq "delete" ) {
        print "DELETE to $api$uri\n" if $verbose > 1;
        if ( defined $ua->{delete} ) {
            $r = $ua->delete("$api$uri", $param);
        } else {
            print "Delete not supported on this platform\n" unless $quiet;
            return({});
        }
    }
    print "Server response : " . $r->decoded_content() . "\n" if $verbose > 2;

    # Export calls can actually return a 404 if an export has failed for some internal tenable.io reason, we should not
    # retry in this case
    unless ( $r->is_success || ( $uri =~ qr#/scans/\d+/export/\d+\/status# && $r->code() == 404 ) ) {
        unless ( $quiet ) {
            #Internal server errors (500) should be fail gracefully so it does not loop
            if ($uri =~ qr#/scans/\d+/export/\d+\/status# && $r->code() == 500) {
                return;
            }
            print "tenable.io returned error code: " . $r->code() . "\nMessage: " . $r->decoded_content();
            print "\n$retries retries left\n";
        }
        if ( $retries > 0 ) {
            print "Sleeping for 30 seconds before retring\n" unless $quiet;
            sleep 30;
            return(rest_call($method,$uri,$param,$response,$nojson,$retries-1))
        } else {
            die "No more retries!\ntenable.io returned error code: " . $r->code() . "\nMessage: " . $r->decoded_content() . " ";
        }
    }

    $$response = $r if $response; # Return response object

    unless ( $nojson ) {
        my $json;

        eval {
            if ( $r->decoded_content() ) {
                $json = decode_json($r->decoded_content());
            } else {
                $json = {};
            }
        } or do {
            $json = {
                error => "Unable to decode JSON from: " . $r->decoded_content()
            }
        };
        if ( $json->{error} ) {
            print "Server returned error: $json->{error}\n";
        }
        return $json;
    }

}
