#!/usr/bin/env perl
# Copyright 2016 Frank Breedijk, Alex Smirnoff
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ------------------------------------------------------------------------------
# This script will call Zate Berg's Nessis-IVIL-Wrapper (see 
# https://github.com/Zate/Nessus-IVIL-Wrapper ) to connect to a Nessus instance,
# initiate a scan, save the results as an IVIL file and import it
# ------------------------------------------------------------------------------

use strict;
use warnings;
use SeccubusV2;
use SeccubusIVIL;

use Getopt::Long;
use Carp;

use JSON;
use Data::Dumper;
use LWP::UserAgent;

sub help();
sub make_timestamp();
sub rest_get($;$$$$);
sub rest_post($;$$$$);
sub rest_delete($;$$$$);
sub rest_call($$$;$$$);

my (
	$user,
	$password,
	$password2,
	$server,
	$policy,
	$port,
	$hosts_file,
	$workspace,
	$scan,
	$nodelete,
	$help,
	$verbose,
	$quiet,
	$sleep,
	$cmd,
	$nosslcheck,
	$token,
	$r,
   );

my @formats = qw(nessus pdf html);

sub login();
sub help();
sub make_timestamp();

# Default values for command line values
$help = 0;
$quiet = 0;
$sleep = 10;
$verbose = 0;
$nosslcheck = 0;

GetOptions(	
		'user|u=s'		=> \$user,
		'password|p=s'		=> \$password,
		'pw=s'			=> \$password2,
		'server|s=s'		=> \$server,
		'policy|pol=s'		=> \$policy,
		'port=s'		=> \$port,
		'hosts|h=s'		=> \$hosts_file,
		'workspace|ws=s'	=> \$workspace,
		'scan|sc=s'		=> \$scan,
		'sleep=s'		=> \$sleep,
		'nodelete'		=> \$nodelete,
		'nosslcheck!'		=> \$nosslcheck,
		'verbose|v+'		=> \$verbose,
		'quiet|q!'		=> \$quiet,
		'help'			=> \$help,
	  );

help() if $help;
$verbose = 0 if $quiet;

# Disable SSL checking if needed
$ENV{PERL_LWP_SSL_VERIFY_HOSTNAME} = 0 unless $nosslcheck;

$port = 8834 unless $port;		 # Default port is 8834
$password = $password2 unless $password; # Equalize the use of --pw

my $config = get_config();

if ( ! $hosts_file ) {
	print "You must specify a valid hosts spec";
	help();
} elsif ( ! $user ) {
	print "You must specify a user";
	help();
} elsif ( ! $password ) {
	print "You must specify a password";
	help();
} elsif ( ! $server ) {
	print "You must specify a nessus server";
	help();
} elsif ( ! $policy ) {
	print "You must specify a policy";
	help();
} elsif ( ! $workspace ) {
	print "You must specify a workspace name";
	help();
} elsif ( ! $scan ){
	print "You must specify a scan name";
	help();
};

my $timestamp = make_timestamp();
print "Timestamp = $timestamp\n" if $verbose > 1;
my $tempscan = "seccubus.$workspace.$scan.$timestamp";
my $tempfile = "/tmp/$tempscan.$$";
my $nivil = "$config->{paths}->{scanners}\/Nessus\/nivil.rb";
my $nessus2ivil = "perl -I$config->{paths}->{modules} $config->{paths}->{bindir}\/nessus2ivil";
my $load_ivil = "perl -I$config->{paths}->{modules} $config->{paths}->{bindir}\/load_ivil";
my $attach_file = "perl -I$config->{paths}->{modules} $config->{paths}->{bindir}\/attach_file";

my $json;
login();

$json = rest_get("/editor/policy/templates",undef,\$r);
die "Cannot get policy list" if ($r->code() != 200);

my $tuuid;
my $pid = -1;

for my $pol (@{$json->{templates}} ) {
	if ($pol->{name} eq $policy) {
		$tuuid = $pol->{uuid};
		last;
	}
}

if (!$tuuid) {
	for my $pol (@{$json->{templates}} ) {
		if ($pol->{name} eq 'basic') {
			$tuuid = $pol->{uuid};
			last;
		}
	}

	$json = rest_get("/policies",undef,\$r);
	die "Cannot get policy list" if ($r->code() != 200);

	foreach my $pol (@{$json->{policies}} ) {
		if ($pol->{name} eq $policy) {
			$tuuid = $pol->{template_uuid} if $pol->{template_uuid};
			$pid = $pol->{id};
			last;
		} 
	}
}

if (!$tuuid && !$pid) {
	die "Policy $policy not found";
} else {
	print "Found policy $policy as template $tuuid policy $pid\n" if $verbose;
}

my $scandata = {
	'uuid'		=> $tuuid,
	'settings'	=> {
		'name'		=> $tempscan,
		'description'	=> 'Seccubus automated scan',
		'launch'	=> 'ON_DEMAND',
	}
};

if ( $pid != -1 ) {
	$scandata->{settings}->{policy_id} = $pid;
}

if ( -e $hosts_file ) {			# Assume its a host spect rather then a
					# hosts file if there is no file 
	open(FILE,$hosts_file) or die "Cannot read hosts file";
	local $/;
	$scandata->{settings}{text_targets} = <FILE>;
	close(FILE);
} else {
	$scandata->{settings}{text_targets} = $hosts_file;
}

print "Imported scan targets: $scandata->{settings}{text_targets} \n" if $verbose;
$json = rest_post('/scans',encode_json($scandata),\$r);
die "Cannot create scan" if ($r->code() != 200); 

my $sid = $json->{scan}{id};
print "Created scan $sid\n" if $verbose;

$json = rest_post("/scans/$sid/launch",{},\$r);
die "Cannot launch scan" if ($r->code() != 200); 

my $launched = $json->{scan_uuid};
print "Launched scan $launched\n" if $verbose;

$json = rest_get("/scans/$sid", {}, \$r);
die "Cannot get scan history" if ($r->code() != 200); 
my $hid;

for my $history (@{$json->{history}} ) {
	if ($history->{uuid} eq $launched) {
		$hid = $history->{history_id};
	}
}

if ($hid) {
	print "Found history id $hid for scan $launched\n" if $verbose;
} else {
	die "Cannot find history id for scan $launched";
}

do {
	sleep(5);
	$json = rest_get("/scans/$sid", { 'history_id' => $hid }, \$r);

	if ($r->code() eq 200) {
		my $vulncount = @{$json->{vulnerabilities}};
		print "Scan status: $json->{info}->{status}. $vulncount findings on $json->{info}->{hostcount} host(s).\n" if $verbose;
	} else {
		die "Scan status request returned " . $r->code();
	} 
} until ($json->{info}->{status} eq "completed" || $json->{info}->{status} eq "canceled" || $json->{info}->{status} eq "aborted" );

foreach my $format ( @formats ) {
	print "Exporting report in $format format\n" unless $quiet;

	my $exportdata = {
		'history_id'	=>	$hid,
		'format'		=>	$format,
	};

	$json = rest_post("/scans/$sid/export", encode_json($exportdata), \$r);

	if ( $r->code == 200 ) {
		my $filehandle=$json->{file};
		print "Initiated scan export to file $filehandle\n" if $verbose;

		do {
			sleep(5);
			$json = rest_get("/scans/$sid/export/$filehandle/status", {}, \$r);
			if ($r->code() eq 200) {
				print "Scan export status: $json->{status}\n";
			} else {
				print "Scan export status request returned " . $r->code() if $verbose;
			}
		} until ($json->{status} eq 'ready');

		rest_get("/scans/$sid/export/$filehandle/download", {}, \$r,1 ); # This call doesn't return json, but a file

		die "Cannot download report" if ($r->code() != 200); 
		print "Report downloaded, saving $filehandle to $tempfile.$format\n" if $verbose;
		open FILE, ">". "$tempfile.$format" or die "Cannot save report";
		print FILE $r->decoded_content();
		close FILE;

	} else {
		print "Could not initiate export in $format format, skipping.\n" if ($r->code() != 200 && ! $quiet); 
	}
}

rest_delete("/scans/$sid/history/$hid",{},\$r);
die "Cannot delete report" if ($r->code() != 200); 
print "Report deleted from server\n" if $verbose;

rest_delete("/scans/$sid" , {}, \$r);
die "Cannot delete scan" if ($r->code() != 200); 
print "Scan deleted from server\n" if $verbose;

rest_delete("/session", {}, \$r);
die "Cannot log out" if ($r->code() != 200); 
print "Logged off server\n" if $verbose;

print "Converting $tempfile.nessus to $tempfile.ivil.xml\n" unless $quiet;
$cmd = "$nessus2ivil --infile '$tempfile.nessus'";
$cmd .= " -v" if $verbose > 1;
print "Execuing $cmd\n" if $verbose > 1;
my $result = `$cmd 2>&1`;
print "$result\n" if $verbose > 1;

print "Importing ivil\n" unless $quiet;
$cmd = "$load_ivil --workspace '$workspace' --scan '$scan' --scanner Nessus --timestamp $timestamp";
$cmd .= " -v" if $verbose > 1;
$cmd .= " '$tempfile.ivil.xml'";
print "Execuing $cmd\n" if $verbose > 1;
$result = `$cmd 2>&1`;
print "$result\n" if $verbose > 1;

print "Scan imported, adding files to scan $scan in workspace $workspace\n" unless $quiet;
foreach my $format ( @formats, "ivil.xml") {
	if ( -e "$tempfile.$format" ) {
		print "Attaching file $tempfile.$format to scan\n" if $verbose;
		$cmd = "$attach_file --workspace '$workspace' --scan '$scan' --timestamp $timestamp --file '$tempfile.$format' --description '$format output'";
		$cmd .= " -v" if $verbose > 1;
		print "Execuing $cmd\n" if $verbose > 1;
		$result = `$cmd 2>&1`;
		print "$result\n" if $verbose > 1;
	}
}

# Cleanup
unless ( $nodelete ) {
	foreach my $format ( @formats, "ivil.xml") {
		if ( -e "$tempfile.$format" ) {
			print "Deleting $tempfile.$format\n" if $verbose >1;
			unlink "$tempfile.$format";
		}
	}
}

print "Done\n" unless $quiet;

exit(0);

sub help() {
	print "
Usage: scan       --user=<username> --password=<password> --server=<server> \\
                  --port=<portnumber> --policy=<policy name> \\
		  --hosts=<hosts file|hosts spec> \\
		  --workspace=<seccubus workspace> --scan=<seccubus scan>\\
                  [--nodelete] [--verbose] [--quiet] [--help]
--user (-u)	  - Nessus username
--password (-p)	  - Nessus password
--server (-s)	  - Nessus server (ip or name)
--port		  - Nessus server portnumber (default=8834)
--policy	  - Name of Nessus policy
--hosts		  - Specification of hosts to scan. Follows the Nessus rules 
		    for specifying hosts, or path to a file containing such 
		    specification
--workspace (-ws) - Seccubus workspace the scan in in
--scan (-sc)	  - Seccubus scan the data should be saved in
--nodelete        - Don't erase temporary files
--sleep           - Seconds to sleep between polls of the Nessus engine 
                    (default=10)
--verbose (-v)    - Be verbose during execution
--quiet (-q)      - Don't print output
--help (-h)       - Print this message
";
	exit(1);
}

sub make_timestamp() {
	my ($second, $minute, $hour, $day, $month, $year) = localtime();
	$month++;
	$second = "0" . $second if $second < 10;
	$minute = "0" . $minute if $minute <10;
	$hour = "0". $hour if $hour < 10;
	$day = "0". $day if $day <10;
	$month = "0" . $month if $month <10;
	$year += 1900;

	return "$year$month$day$hour$minute$second";
}

sub login() {
	my $cred = {
		'username' => $user,
		'password' => $password
	};
	$token = undef;
	my $r;
	my $json = rest_post("/session",$cred, \$r);

	confess "Cannot authenticate to scanner: " unless $r->is_success;

	print "Authenticated\n" if $verbose;

	$token = $json->{token};
}

sub rest_get($;$$$$) {
	my $uri = shift;
	my $params = shift;
	my $response = shift;
	my $nojson = shift;

	rest_call("get",$uri,$params,$response,$nojson);
}

sub rest_post($;$$$$) {
	my $uri = shift;
	my $params = shift;
	my $response = shift;
	my $nojson = shift;

	rest_call("post",$uri, $params,$response,$nojson);
}

sub rest_delete($;$$$$) {
	my $uri = shift;
	my $params = shift;
	my $response = shift;
	my $nojson = shift;

	rest_call("delete",$uri, $params,$response,$nojson);
}

sub rest_call($$$;$$$){
	my $method = shift;
	my $uri = shift;
	my $param = shift;
	my $response = shift;
	my $nojson = shift;
	my $last = shift;

	my $ua = LWP::UserAgent->new();
	$ua->agent("Seccubus $SeccubusV2::VERSION ");

	$ua->default_header('Content-Type' => 'application/json');
	$ua->default_header('Accept' => 'application/json');
	# Disable max return size
	$ua->max_size(undef);

	if ( $token ) {
		$ua->default_header('X-Cookie' => "token=$token");
	}

	my $r;
	if ( $method eq "post" ) {
		if ( $verbose > 2 ) {
			print "POST to https://$server:$port$uri\nParams:\n";
			print Dumper $param;
		}
		if ( ref $param ) {
			$r = $ua->post("https://$server:$port$uri", $param);
		} else {
			my $req = HTTP::Request->new(POST => "https://$server:$port$uri");
			$req->content_type('application/json');
			$req->content($param);

			$r = $ua->request($req);
		}
	} elsif ( $method eq "get" ) {
		my $geturi = "$uri?";
		foreach my $key ( sort keys %$param ) {
			$geturi .= $key . "=" . $param->{$key} . "&";
		}
		$geturi =~ s/\&$//;
		print "GET to https://$server:$port$geturi\n" if $verbose > 2;
		$r = $ua->get("https://$server:$port$geturi");
	} elsif ( $method eq "delete" ) {
		print "DELETE to https://$server:$port$uri\n" if $verbose > 2;
		if ( defined $ua->{delete} ) {
			$r = $ua->delete("https://$server:$port$uri", $param);
		} else {
			print "Delete not supported on this platform\n" unless $quiet;
		}
	}
	print "Server response : " . $r->decoded_content() . "\n" if $verbose > 2;

	if ( $token && ( $r->code() == 401 || $r->code() == 503 ) && ! $last) {
		print "Authentication failed, attempting to re-login\n" if $verbose;
		# Login and retry if failed
		login();
		return(rest_call($method,$uri,$param,$response,undef,1)); 
	}

	$$response = $r if $response; # Return response object

	unless ( $nojson ) {
		my $json;

		eval {
			if ( $r->decoded_content() ) {
				$json = decode_json($r->decoded_content());
			} else {
				$json = {};
			}
		} or do {
			die "Unable to decode JSON from: " . $r->decoded_content();
		};
		if ( $json->{error} ) {
			print "Server returned error: $json->{error}\n";
		}
		return $json;
	}
}