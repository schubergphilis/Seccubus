#!/usr/bin/env perl
# Copyright 2016 Frank Breedijk, Alex Smirnoff, Glenn ten Cate
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ------------------------------------------------------------------------------
# This script will call Zate Berg's Nessis-IVIL-Wrapper (see 
# https://github.com/Zate/Nessus-IVIL-Wrapper ) to connect to a Nessus instance,
# initiate a scan, save the results as an IVIL file and import it
# ------------------------------------------------------------------------------

use strict;
use SeccubusV2;
use SeccubusRuns;
use SeccubusFindings;
use SeccubusIVIL;
use IVIL;

use Getopt::Long;
use Carp;

use JSON;
use LWP::UserAgent;
use Data::Dumper;

sub help();
sub make_timestamp();

my (
	$workspace,
	$scan,
	$api,
	$hosts,
	$sleep,
	$nosslcheck,
	@hosts,
	$userAgent,
	$clearCache,
	$noClearCache,
	$fromCache,
	$publish,
	$all,
	$nodelete,
	$help,
	$verbose,
	$quiet,
   );

sub help();
sub make_timestamp();

# Default values for command line values
$help = 0;
$quiet = 0;
$sleep = 15;
$verbose = 0;
$nosslcheck = 0;
#$api = "https://api.dev.ssllabs.com/api/fa78d5a4/";
$api = "https://api.ssllabs.com/api/v2/";
$userAgent = "seccubus-ssllabs v0.1";
$noClearCache = 0;

GetOptions(	
	    'hosts|h=s'			=> \$hosts,
	    'workspace|ws=s'	=> \$workspace,
	    'scan|sc=s'			=> \$scan,
		'api|a=s'			=> \$api,
		'sleep|s=s'			=> \$sleep,
		'nosslcheck!'		=> \$nosslcheck,
		'useragent=s'		=> \$userAgent,
		'no-clear-cache!'	=> \$noClearCache,
		'from-cache!'		=> \$fromCache,
		'nodelete!'			=> \$nodelete,
		'publish'			=> \$publish,
		'verbose|v+'		=> \$verbose,
		'quiet|q!'			=> \$quiet,
		'help'				=> \$help,
	  );

help() if $help;
$verbose = 0 if $quiet;

# Disable SSL checking if needed
$ENV{PERL_LWP_SSL_VERIFY_HOSTNAME} = 0 unless $nosslcheck;

# Check params
if ( ! $hosts ) {
	print "You must specify a valid hosts spec";
	help();
}
if ( ! $workspace ) {
	print "You must specify a workspace";
	help();
}
if ( ! $scan ) {
	print "You must specify a scan";
	help();
}

# Output files
my $timestamp = make_timestamp();
my $tempfile = "/tmp/seccubus.$scan.$timestamp";

# Expand hosts
if ( -e $hosts ) {
	open HOSTS, $hosts or die "Unable to open file '$hosts'";
	while (<HOSTS>) {
		chomp;
		s/\#.*$//; # Remove comments
		s/\s+$//; # Remove trailing spaces
		if ( $_ ) { # Ignore blank lines
			push @hosts, $_;
			print "Scanning hosts $_\n" if $verbose > 1;
		}
	}
	close HOSTS;
} else {
	@hosts = split /\s+/, $hosts #split it
}

# Fix param values
if ( $noClearCache || $fromCache ) {
	$clearCache = 0;
} else {
	$clearCache = 1;
}


# Setup LWP::UserAgent client
#my $client = REST::Client->new(host => $api);
my $ua = LWP::UserAgent->new();
$ua->agent("$userAgent ");
# Disable max return size set by REST::Client
$ua->max_size(undef);
# Default headers
$ua->default_header('Content-Type' => 'application/json');
$ua->default_header('Accept' => 'application/json');

# Test if SSL labs is active
my $json;
print "calling info\n" if $verbose > 1;
my $response = $ua->get("$api/info");
die "Unable to contact SSL labs at $api" if (! $response->is_success);
$json = decode_json($response->decoded_content());
# Verbose 3 or higher is true debug mode

if ( $verbose > 2 ) {  
	print "*** QUERY ***\n";
	print "$api/info\n";
	print "*** RESPONSE HEADERS *** \n";
	my $headers = $response->headers();
	print $headers->as_string();
	print "*** RESPONSE DATA ***\n";
	print $response->decoded_content();
}



my $scanner_ver = "v$json->{engineVersion} (criteria version $json->{criteriaVersion})";
my $maxScans = $json->{clientMaxAssessments};
my $coolOff = $json->{newAssessmentCoolOff};
unless($quiet) {
	print "Scans will be performed by SSL Labs v$json->{engineVersion} (criteria version $json->{criteriaVersion}) - www.ssllabs.com\n" unless $quiet;
	print "Maximum number of concurrent assessments: $maxScans\n" if $verbose;
	print "Cool off period before starting a new assessment: $coolOff ms\n" if $verbose;
	print "\n";
	print join "\n", @{$json->{messages}};
	print "\n";
}

my $active = 9999;
my $results = {};
my $extraSleep = 0;
while ( $active ) {
	# Don't sleep on the first iteration
	unless ( $active == 9999 ) {
		print "$active scans in progress, sleeping for $sleep seconds\n" unless $quiet;
		sleep($sleep);		
	}
	# Iterate over all hosts
	$active = 0;
	foreach my $host ( @hosts ) {
		chomp $host;
		# Determine if we need to query result for this host. Only if a scan is in progress and we have not exceeded our scan limit
		if ( $active < $maxScans && 
			(! defined $results->{$host} || $results->{$host}->{status} eq "IN_PROGRESS" || $results->{$host}->{status} eq "DNS" ) ) {
			$active++;

			# Delay if we were previously notified of a problem on the API side
			if ( $extraSleep ) {
				print "Sleeping for $extraSleep seconds\n" if $verbose && $extraSleep;
				sleep($extraSleep);
			}

			# Let's build a query
			my @params = (
				"host=$host",
				"all=done"
			);
			push @params, "publish=on" if $publish;
			push @params, "fromCache=on" if $fromCache;

			# If this is the first time we call the API for a host and we want the cache cleared, now it s good time to do it.
			if ( ! defined $results->{$host} ) {
				push @params, "clearCache=on" if $clearCache;
				print "Starting scan of $host\n" unless $quiet;
				print "Sleeping for $coolOff ms before scan\n" if $verbose;
				select(undef, undef, undef, $coolOff/1000);
			} else {
				print "Getting status of $host scan\n" if $verbose;
			}

			# Do the actual API call
			my $url = "analyze?" . join "&", @params;
			print "Calling $url\n" if $verbose > 1;
			my $response = $ua->get("$api/$url");


			# Verbose 3 or higher is true debug mode
			if ( $verbose > 2 ) {  
				print "*** QUERY ***\n";
				print "$api/info\n";
				print "*** RESPONSE HEADERS *** \n";
				my $headers = $response->headers();
				print $headers->as_string();
				print "*** RESPONSE DATA ***\n";
				print $response->decoded_content();
			}

			my $newMaxScans = $response->headers()->header('X-ClientMaxAssessments');
			if ( $newMaxScans && $newMaxScans != $maxScans ) {
				$maxScans = $newMaxScans;
				print "API has sent new max scan limit of $maxScans, adjusting...\n" unless $quiet;
			}

			# Handle responses: 200 - All OK
			eval {
				$json = decode_json($response->decoded_content());
			} or do {
				die "Unable to decode JSON from: " . $response->decoded_content();
			};
			if ($response->code() == 200) {
				# Store result and continue normal timing
				$extraSleep = 0;
				print "$host -> $json->{status}\n" if $verbose;
				$results->{$host} = $json;
				if ( $json->{status} ne "IN_PROGRESS" && $json->{status} ne "DNS" ) {
					print "Host: $host, status: $json->{status} - done\n" unless $quiet;
					$active--;
				} else {
					print "Host: $host, status: $json->{status} - in progress\n" unless $quiet;

				}
			# Other statuses are a problem
			} elsif ( $response->code() == 429 ) {
				print "Request rate too high, sleeping 5 minutes before next request\n" unless $quiet;
				$extraSleep = 300;
			} elsif ( $response->code() == 503 ) {
				print "Service not available, sleeping 15 minutes before next request\n" unless $quiet;
				$extraSleep = 900;
			} elsif ( $response->code() == 529 ) {
				print "Service overloaded, sleeping 30 minutes before next request\n" unless $quiet;
				$extraSleep = 1800;
			} else {
				# Enumerate error messages
				my $msg = "";
				foreach my $error ( @{$json->{errors}} ) {
					$msg .= "$error->{message}\n";
				}
				print "Received error. Error code ". $response->code() . " messages:\n$msg" unless $quiet;
				print "Host: $host, status: ERROR - done\n" unless $quiet;

				# Atrifically construct an ERROR API reply
				$results->{$host}->{status} = "ERROR";
				$results->{$host}->{statusMessage} = "$msg";
				# Mark the host as being inactive
				$active--;
			}
		}
	}
	print "$active active scans\n" if $verbose;
}

# Create output files
open JSFILE, ">$tempfile.json" or die "Unable to open $tempfile.json for write";
print JSFILE to_json($results, {pretty => 1});
close JSFILE;

# Create IVIL file header
open OUT, ">$tempfile.ivil.xml" or die "Unable to open $tempfile.ivil.xml for write";
print OUT xml_header();
print OUT ivil_open();

# Addressee block
print OUT ivil_addressee("Seccubus", {
		"workspace" => $workspace,
		"scan"		=> $scan,
	}
);
# Findings
print OUT "<findings>\n";

# Iterate over each host
foreach my $host ( @hosts ) {
	my $scan = $results->{$host};

	my $finding = {};
	if ( $scan->{port} ) {
		$finding->{port} = "$scan->{port}/tcp";
	} else {
		$finding->{port} = "unknow";
	}

	# Handle errors first
    if ( $scan->{status} eq "ERROR" || $scan->{status} eq "Assessment failed" ) {
		$finding->{ip} = $host;
		$finding->{hostname} = $host;
		$finding->{id} = "ERROR/Assessment failed";
		$finding->{finding} = $scan->{statusMessage};
		$finding->{severity} = 0;
		print OUT ivil_finding($finding);
	} else {
		$finding->{hostname} = $host;
		$finding->{ip} = $host;
		$finding->{severity} = 0;
		foreach my $key ( keys %$scan ) {
			if ( $key eq "criteriaVersion" || $key eq "engineVersion" || $key eq "host"  || 
				$key eq "port" || $key eq "status" || $key eq "startTime" || $key eq "endTime" ||
				$key eq "testTime" ) {
				# Ignore these keywords
			} elsif ( $key eq "protocol" ) {
				# Simple dump keys
				$finding->{id} = $key;
				$finding->{finding} = "$key - $scan->{$key}";
				print OUT ivil_finding($finding);
			} elsif ( $key eq "isPublic" ) {
				$finding->{id} = $key;
				if ( $scan->{isPublic} ) {
					$finding->{finding} = "Scan results are visible to the general public";
				} else {
					$finding->{finding} = "Scan results are hidden"
				}
				print OUT ivil_finding($finding);
			} elsif ( $key eq "endpoints" ) {
				# Iterate through each endpoint
				foreach my $ep ( @{$scan->{$key}} ) {
					# Now the endpoint is the target
					$finding->{ip} = "$host/$ep->{ipAddress}";
					foreach my $epkey ( sort keys %$ep ) {
						$finding->{id} = $epkey;
						if ( $epkey eq "delegation" || $epkey eq "duration" || $epkey eq "port" || 
							$epkey eq "eta" || $epkey eq "ipAddress" || $epkey eq "progress" ||
							$epkey eq "statusMessage" || $epkey eq "statusDetailsMessage" || $epkey eq "statusDetails" ) {
							# Ignore
						} elsif ( $epkey eq "grade" || $epkey eq "serverName" || $epkey eq "npnProtocols" || $epkey eq "gradeTrustIgnored" ) {
							# Simpel dump values
							$finding->{finding} = "$epkey - $ep->{$epkey}";
							print OUT ivil_finding($finding);
						} elsif ( $epkey eq "hasWarnings" ) {
							if ( $ep->{$epkey} ) {
								$finding->{finding} = "This host has findings that negatively effect the score";
								print OUT ivil_finding($finding);
							}
						} elsif ( $epkey eq "isExceptional" ) {
							if ( $ep->{$epkey} ) {
								$finding->{finding} = "This host is exceptionally well configured";
								print OUT ivil_finding($finding);
							}
						} elsif ( $epkey eq "details" ) {
							# Iterate over keys
							foreach my $dkey ( sort keys %{$ep->{$epkey}} ) {
								my $det = $ep->{$epkey}->{$dkey};
								if ( $dkey eq "chain" || $dkey eq "compressionMethods" || $dkey =~ /Time$/ 
									|| $dkey =~ /refixDelegation$/ || $dkey eq "sims" || $dkey eq "suites"  || $dkey eq "statusDetails" 
								) {
									# Ignore
								} elsif ( $dkey eq "compression" || $dkey eq "heartbeat" || $dkey eq "ocspStapling" 
									|| $dkey eq "sniRequired" || $dkey eq "supportsNpn" || $dkey eq "fallbackScsv" 
									|| $dkey eq "stsSubdomains") {
									# Is supported type findings
									$finding->{id} = $dkey;
									if ( $det ) {
										$finding->{finding} = "$dkey is supported";
									} else {
										$finding->{finding} = "$dkey is supported";
									}
									print OUT ivil_finding($finding);
								} elsif ( $dkey eq "heartbleed"  || $dkey eq "rc4WithModern" || $dkey eq "supportsRc4" 
									|| $dkey eq "vulnBeast"  || $dkey eq "freak" || $dkey eq "logjam" || $dkey eq "poodle" ) {
									# Is vulnerable type findings
									if ( $det ) {
										$finding->{id} = $dkey;
										$finding->{finding} = "Server is vulnerable for $dkey";
										print OUT ivil_finding($finding);
									}
								} elsif ( $dkey eq "httpStatusCode" || $dkey eq "serverSignature"  || $dkey eq "npnProtocols" 
									|| $dkey eq "httpForwarding" || $dkey eq "stsResponseHeader" ) {
									# Dump type
									$finding->{id} = $dkey;
									$finding->{finding} = "$dkey - $det";
									print OUT ivil_finding($finding);
								} elsif ( $dkey eq "stsMaxAge" ) {
									# Dump type
									$finding->{id} = $dkey;
									$finding->{finding} = "HSTS Maximum age: $det seconds\n";
									$finding->{finding} .= "WARNING: This is below the recommended length of 180 days\n" if $det < 1555200;
									print OUT ivil_finding($finding);
								} elsif ( $dkey eq "hasSct" ) {
									$finding->{id} = $dkey;
									$finding->{finding} = "";
									$finding->{finding} .= "SCT is provided in the certificate" if $det & 1;
									$finding->{finding} .= "SCT is provided in stapled OCSP response" if $det & 2;
									$finding->{finding} .= "SCT is provided in TLS extension (ServerHello)" if $det & 4;
									$finding->{finding} .= "\n\nSee http://www.certificate-transparency.org/ for more info";
									print OUT ivil_finding($finding);
								} elsif ( $dkey eq "sessionTickets" ) {
									$finding->{id} = $dkey;
									$finding->{finding} = "";
									$finding->{finding} .= "Session tickets are supported" if $det & 1;
									$finding->{finding} .= "Session tickets not implemented correctly" if $det & 2;
									$finding->{finding} .= "Server is intollerant to session tickets extension" if $det & 4;
									print OUT ivil_finding($finding);
								} elsif ( $dkey eq "poodleTls" ) {
									$finding->{id} = $dkey;
									$finding->{finding} = "";
									$finding->{finding} .= "Poodle over TLS - timeout\n" if $det == -3;
									$finding->{finding} .= "Poodle over TLS - TLS not supported\n" if $det == -2;
									$finding->{finding} .= "Poodle over TLS - test failed\n" if $det == -1;
									$finding->{finding} .= "Poodle over TLS - status unknown\n" if $det == 0;
									$finding->{finding} .= "Poodle over TLS - not vulnerable\n" if $det == 1;
									$finding->{finding} .= "Poodle over TLS - vulnerable\n" if $det == 2;
									$finding->{finding} .= "Test value: $det\n";
									print OUT ivil_finding($finding);
								} elsif ( $dkey eq "openSslCcs" ) {
									$finding->{id} = $dkey;
									$finding->{finding} = "";
									$finding->{finding} .= "CVE-2014-0224 test failed\n" if $det == -1;
									$finding->{finding} .= "CVE-2014-0224 status unknown\n" if $det == 0;
									$finding->{finding} .= "CVE-2014-0224 not vulnerable\n" if $det == 1;
									$finding->{finding} .= "CVE-2014-0224 possibly vulnerable, but not exploitable\n" if $det == 2;
									$finding->{finding} .= "CVE-2014-0224 vulnerable and exploitable\n" if $det == 3;
									$finding->{finding} .= "Test value: $det\n";
									print OUT ivil_finding($finding);
								} elsif ( $dkey eq "sessionResumption" ) {
									$finding->{id} = $dkey;
									$finding->{finding} = "Session resumption is not enabled and we're seeing empty session IDs\n" if $det == 0;
									$finding->{finding} = "Endpoint returns session IDs, but sessions are not resumed\n" if $det == 1;
									$finding->{finding} = "Session resumption is enabled\n" if $det == 2;
									print OUT ivil_finding($finding);
								} elsif ( $dkey eq "protocols" ) {
									$finding->{id} = $dkey;
									$finding->{finding} = "Supported protocols:\n";
									foreach my $prot ( @$det ) {
										$finding->{finding} .= "$prot->{name} $prot->{version}\n"
									}
									print OUT ivil_finding($finding);
								} elsif ($dkey eq "key") {
									$finding->{id} = "key";
									$finding->{finding} = "Key\n$det->{alg}\nSize: $det->{size}\nStrength: $det->{strength}\n";
									if ( $det->{debianFlaw} ) {
											$finding->{finding} .= "Key was genereated on a Debian system with a flawed PRNG and is weak";
									}
									print OUT ivil_finding($finding);
								} elsif ($dkey eq "forwardSecrecy") {
									$finding->{id} = "pfs";
									$finding->{finding} = "";
									$finding->{finding} .= "PFS is supported with at least one browser\n" if ($det & 1);
									$finding->{finding} .= "PFS is supported for modern browsers\n" if ($det & 2);
									$finding->{finding} .= "PFS is supported for all browsers with PFS support\n" if ($det & 4);
									$finding->{finding} = "PFS not supported :(" unless $finding->{finding}; 
									print OUT ivil_finding($finding);
								} elsif ($dkey eq "renegSupport") {
									$finding->{id} = "reneg";
									$finding->{finding} = "";
									$finding->{finding} = "The server does not support any renegotiation" if ( $det == 0 );
									$finding->{finding} .= "Insecure client-initiated renegotiation is supported\n" if ($det & 1);
									$finding->{finding} .= "Secure renegotiation is supported\n" if ($det & 2);
									$finding->{finding} .= "Secure client-initiated renegotiation is supported\n" if ($det & 4);
									$finding->{finding} .= "The server requires secure renegotiation support\n" if ($det & 8);
									$finding->{finding} .= "Value: $det\n";
									print OUT ivil_finding($finding);
								} elsif ( $dkey eq "cert" ) {
									$finding->{id} = "cert";
									my $txt = "Subject: $det->{subject}\nIssuer: $det->{issuerLabel}\n\nCommon names:\n";
									if ( defined $det->{commonNames}) {
										$txt .= join "\n", @{$det->{commonNames}};
									} else {
										$txt .= "undefined";
									}
									if ( $det->{altNames} ) {
										$txt .= "\n\nAlternative names:\n";
										$txt .= join "\n", @{ $det->{altNames} };
									}
									$txt .= "\n\n";

									if ( $det->{sgc} ) {
										$txt .= "Certificate has CSG support\n";
									} else {
										$txt .= "Certificate has NO CSG support\n";
									}

									$finding->{finding} = $txt;
									print OUT ivil_finding($finding);

									$finding->{id} = "EV";
									if ( $det->{valdiationType} eq "E" ) {
										$txt = "Yes";
									} else {
										$txt = "No";
									}

									$finding->{finding} = $txt;
									print OUT ivil_finding($finding);

									$finding->{id} = "revocation";
									$txt = "RevocationInfo: $det->{revocationInfo}\n";
									$txt .= "CRL info is available\n" if ( $det->{revocationInfo} & 1 );
									$txt .= "CRL info NOT available\n" unless ( $det->{revocationInfo} & 1 );
									$txt .= "OCSP info is available\n" if ( $det->{revocationInfo} & 2 );
									$txt .= "OCSP info NOT available\n" unless ( $det->{revocationInfo} & 2 );
									$txt .= "\nRevocationStatus: $det->{revocationStatus}\n";
									$txt .= "Revocation status not checked\n" if $det->{revocationStatus} == 0;
									$txt .= "Certificate revoked\n" if $det->{revocationStatus} == 1;
									$txt .= "Certificate not revoked\n" if $det->{revocationStatus} == 2;
									$txt .= "Revocation check error\n" if $det->{revocationStatus} == 3;
									$txt .= "No revocation info available\n" if $det->{revocationStatus} == 4;
									$txt .= "Internal SSL labs error\n" if $det->{revocationStatus} == 5;
									$finding->{finding} = $txt;

									print OUT ivil_finding($finding);

									# If we have issues
									if ( $det->{issues} ) {
										$finding->{id} = "cert_issues";
										$txt = "Certificate issues:\n";
										$txt .= "Certifcate has not valid chain of trust\n" if ( $det->{issues} & 1 );
										$txt .= "Certifcate validity date not yet reached\n" if ( $det->{issues} & 2 );
										$txt .= "Certifcate validity date expired\n" if ( $det->{issues} & 4 );
										$txt .= "Certificate name does not match hostname\n" if ( $det->{issues} & 8 );
										$txt .= "Certifcate is revoked\n" if ( $det->{issues} & 16 );
										$txt .= "Certifcate has a bad common name\n" if ( $det->{issues} & 32 );
										$txt .= "Certifcate is self signed\n" if ( $det->{issues} & 64 );
										$txt .= "Certifcate is blacklisted\n" if ( $det->{issues} & 128 );
										$txt .= "Certifcate has insecure signature\n" if ( $det->{issues} & 256 );
										$finding->{finding} = $txt;
										print OUT ivil_finding($finding);
									}

								} else {
									# Treat anything we don't know as dump type
									$finding->{id} = $dkey;
									$finding->{finding} = "Unknown detail $dkey\n\n" . to_json($det,{ pretty => 1, allow_nonref => 1});
									print OUT ivil_finding($finding);
								}
							}

							# TODO: Parse details
						} else {
							$finding->{id} = $epkey;
							$finding->{finding} = "Unknown key $epkey\n\n" . to_json($ep->{$epkey},{ pretty => 1, allow_nonref => 1});
							print OUT ivil_finding($finding);
						}					
					}

					#die Dumper($ep);
				}
				$finding->{ip} = $host;
			} else {
				$finding->{id} = $key;
				$finding->{finding} = to_json($scan->{$key},{ pretty => 1, allow_nonref => 1});
				print OUT ivil_finding($finding);
			}
		}
		#die Dumper($scan);
	}
}

# Close IVIL
print OUT "</findings>\n";
print OUT ivil_close();
close OUT;
#die `cat $tempfile.ivil.xml`;
#die Dumper($results);

# Load the results
my ( $workspace_id, $scan_id, $run_id) = load_ivil("$tempfile.ivil.xml", "Qualys SSL labs", $scanner_ver, $timestamp );
# Process the results
process_status($workspace_id, $scan_id, $run_id, $verbose);

# Attach files
print "Attaching file '$tempfile.json' to scan '$scan'\n" if $verbose;
update_run($workspace_id, $scan_id, $timestamp, "$tempfile.json", "Raw JSON results");
print "Attaching file '$tempfile.ivil.xml' to scan '$scan'\n" if $verbose;
update_run($workspace_id, $scan_id, $timestamp, "$tempfile.ivil.xml", "IVIL file");

unless ( $nodelete ) {
	unlink "$tempfile.json";
	unlink "$tempfile.ivil.xml";
}
print "Done\n" unless $quiet;

exit(0);

sub help() {
	print "
Usage: scan     --hosts=<hosts file|hosts spec> 
                --workspace=<seccubus workspace> --scan=<seccubus scan>
		        [--api=<api_url>] [--sleep=<sleeptime>] [--nosslcheck]
		        [--useragent=<string>] [--no-clear-cache] [--from-cache]
		        [--publish] [--nodelete] [--verbose] [--quiet] [--help]

--hosts		      - Specification of hosts to scan. (A file containing) a 
                    list of hostnames separated by newlines. Empty lines 
                    are ignored. Comments start with #
--workspace (-ws) - Seccubus workspace the scan in in
--scan (-sc)	  - Seccubus scan the data should be saved in
--api (-a)		  - URL of the ssllabs API, defaults to 
                    https://api.ssllabs.com/api/v2/
--sleep           - Seconds to sleep between polls of the API 
                    (default=15) Lower then 15 seconds is considered rude
                    and a violation of the terms of usage of the API
--nosslcheck      - Do not check the validity of the API SSL certificate
                    this can be used when the PI is e.g. intercepted by
                    a proxy that does not have a recognised SSL certificate
                    or when a outdated operating system is used (NOT RECOMMENDED)
--useragent       - Use a custom user agent string. Default: seccubus-ssllabs v0.1
                    The default user agent string of REST::Client is appended
                    to this user agent string
--no-clear-cache  - Do not clear the cache of the SSL labs scan engine 
                    Gives results faster but may be less accurate
--from-cache      - Prefer cached results over fresh results (for very 
	                quick results)
--publish         - Publish the results of this scan on the SSL labs website
--nodelete        - Don't erase temporary files
--verbose (-v)    - Be verbose during execution (repeat to increase verbosity)
--quiet (-q)      - Don't print output
--help (-h)       - Print this message
";
	exit(1);
}

sub make_timestamp() {
	my ($second, $minute, $hour, $day, $month, $year) = localtime();
	$month++;
	$second = "0" . $second if $second < 10;
	$minute = "0" . $minute if $minute <10;
	$hour = "0". $hour if $hour < 10;
	$day = "0". $day if $day <10;
	$month = "0" . $month if $month <10;
	$year += 1900;

	return "$year$month$day$hour$minute$second";
}

