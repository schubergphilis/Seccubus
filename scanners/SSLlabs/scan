#!/usr/bin/env perl
# Copyright 2013, 2014 Frank Breedijk, Alex Smirnoff
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ------------------------------------------------------------------------------
# This script will call the SSLyze scanner and import the results as IVIL
# ------------------------------------------------------------------------------

use strict;
use SeccubusV2;
use SeccubusIVIL;
use IVIL;

use Getopt::Long;
use Carp;
use Socket;
use LWP::UserAgent;
use HTML::TreeBuilder;
use Data::Dumper;

my (
	$hosts_file,
	$workspace,
	$scan,
	$nodelete,
	$help,
	$verbose,
	$quiet,
   );

# Create default values
$help = 0;


GetOptions(	
		'hosts=s'		=> \$hosts_file,
		'workspace|ws=s'	=> \$workspace,
		'scan|sc=s'		=> \$scan,
		'nodelete'		=> \$nodelete,
		'verbose|v+'		=> \$verbose,
		'quiet|q!'		=> \$quiet,
		'help|h'		=> \$help,
	  );

help() if $help;
$verbose = 0 if $quiet;

my $config = get_config();
my $load_ivil = "perl -I$config->{paths}->{modules} $config->{paths}->{bindir}\/load_ivil";
my $attach_file = "perl -I$config->{paths}->{modules} $config->{paths}->{bindir}\/attach_file";

print "Hosts file specified $hosts_file\n" if $verbose;
if ( ! $hosts_file || ! -e $hosts_file ) {
	print "You must specify a valid hosts file";
	help();
} elsif ( ! $workspace ) {
	print "You must specify a workspace name";
	help();
} elsif ( ! $scan ){
	print "You must specify a scan name";
	help();
};

my $timestamp = make_timestamp();
print "Timestamp = $timestamp\n" if $verbose;
my $tempfile = "/tmp/seccubus.ssllabs.$$";

my %hosts;

open HOSTS, $hosts_file or die "Unable to read hosts from $hosts_file";
while (<HOSTS>) {
	chomp;
	my $line = $_;
	$_ =~ s/\#.*//;
	if ( $_ =~ /^\w.*\.\w+$/ ) {
		$hosts{$_}->{status} = 0;
	} else {
		print "Skipping line $line\n" if $verbose;
	}
}
close HOSTS;

#
### Phase 1 fetching results
#

# Initialize LWP and parser
my $ua = LWP::UserAgent->new();
$ua->agent("Seccubus SSLLabs scraper");
$ua->default_header("Referrer", "https://www.ssllabs.com/");

my $todo = 2;
while ( $todo ) {
	if ( $todo != 2 ) {
		print "Sleeping for 15 seconds\n" unless $quiet;
		sleep 15;
	}
	$todo = 0;
	foreach my $url ( sort keys %hosts ) {
		if ($hosts{$url}->{status} < 1 ) {
			# Fetch results
			print "Fetching results for $url\n" if $verbose;
			my $response = $ua->get("https://www.ssllabs.com/ssltest/analyze.html?d=$url&ignoreMismatch=on");
			$hosts{$url}->{data} = $response->content();
		
			my $p = HTML::TreeBuilder->new();
			$p -> parse($hosts{$url}->{data});
			my $rating = $p->look_down('id','rating');
			if ( $rating ) { # Scan is complete
				$hosts{$url}->{status} = 1;
				print "$url scored " . $rating->as_text . "\n" if $verbose;
			} else {
				# Let see if multiple elements were returned
				my $multi = $p->look_down('id','multiTable');
				if ( $multi ) { # Lets add them all to the hash
					print "$url has multiple IPs, adding them to the hostlist\n" if $verbose;
					foreach my $ip ( $multi->look_down('class','ip') ) {
						if (index ($url, "&s=" . $ip->as_text()) == -1) { # ugly hack
							# Disable main site
							$hosts{$url}->{status} = 3;
							$url =~ s/\&s=.*//g;
							my $newurl = "$url&s=" . $ip->as_text();
							print "Adding host $newurl to targets\n" if $verbose;
							$hosts{$newurl}->{status}=0;
							$todo = 1;
						} else {
							print "IP is already in target $url\n" if $verbose;
						}
					}
				} else {
					my $warning = $p->look_down('id','warningBox');
					if ($warning) {
						if ( $warning->as_text =~ /^ Please wait/ ) {
							# Simply not finished yet
							$todo = 1;
							print "$url not finished yet\n" if $verbose;
						} elsif ( $warning->as_text =~ /^ Certificate name mismatch/ ) {
							print "$url has certificate name mismatch, dropping from scan\n" unless $quiet;
							# Disable site
							$hosts{$url}->{status} = 2;
						} else {
							print "$url has unknown error: '" . $warning->as_text() . "', dropping from scan\n" unless $quiet;
							# Disable site
							$hosts{$url}->{status} = 2;
						}	
					} else {
						my $warning = $p->look_down('class',"submitError");
						if ( $warning ) {
							print "$url has submit error: '" . $warning->as_text() . "', dropping from scan\n" unless $quiet;
							# Disable site
							$hosts{$url}->{status} = 2;
						} else {
							$p->dump();
							die "Page not recognized";
						}
					}
				}
			}
			$p->delete;
			$rating = undef;
		}
	}
}

# Create files and IVIL output
open IOUT, ">$tempfile.ivil.xml" or die "Unable to write to $tempfile.ivil.xml";
print IOUT xml_header();
print IOUT ivil_open();
print IOUT ivil_addressee("Seccubus", { workspace => $workspace, scan => $scan } );
print IOUT "<findings>\n";

foreach my $url ( sort keys %hosts ) {
	print "Processing results for $url\n" if $verbose;
	my $finding = {};
	$finding->{hostname} = $url;
	$finding->{hostname} =~ s/\&.*//g;
	$finding->{port} = "443/tcp";


	if ( $hosts{$url}->{status} == 1 ) { # Valid data
		my $p = HTML::TreeBuilder->new();
		$p -> parse($hosts{$url}->{data});

		my ($hostip) = $p->look_down('class','ip');
		$hostip = $hostip -> as_trimmed_text;
		$hostip =~ s/[\(\)]//g;
		$finding->{ip} = $hostip;

		# URL
		$finding->{id} = "url";
		$finding->{finding} = "https://www.ssllabs.com/ssltest/analyze.html?d=$url&ignoreMismatch=on";
		$finding->{severity} = 4;
		print IOUT ivil_finding($finding);

		# Ratings
		$finding->{id} = "ratings";
		my $txt = "";

		my $rating = $p->look_down('id','rating');
		if (!$rating) {
			print "SOMETHING WENT REALLY WRONG";
			$finding->{id} = "skipped";
			$finding->{finding} = "$url was skipped due to internal error, please investigate";
			print IOUT ivil_finding($finding);
			next;
		}
		$rating = $rating->as_text;
		$rating =~ s/Rating/Rating /;
		if ($rating =~ /A-/) {
			$finding->{severity} = 3;
		} elsif ($rating =~ /A/) {
			$finding->{severity} = 4;
		} else {
			$finding->{severity} = 2;
		}
			
			
		$txt = $rating;
		$txt .= "\n\n";

		my $chart = $p->look_down('id', 'chart');
		my @rows = $chart->look_down('class', 'chartRow');
		foreach my $row ( @rows ) {
			$txt .= $row->as_text();
			$txt .= "\n";
		}
		$txt =~ s/\xA0/ /g;
		$finding->{finding} = $txt;

		print IOUT ivil_finding($finding);


		# Warnings
		my @warnings = $p->look_down('class','reportSection')->look_down('class','warningBox');
		if (@warnings) {
			$finding->{id} = "warnings";
			my $txt = "";
			foreach my $warning ( @warnings ) {
				$txt .= $warning->as_text() . "\n";
			}
			$txt =~ s/[\xA0-\xFF]/ /g;
			$txt =~ s/MORE INFO/ /g;
			$finding->{finding} = $txt;
			$finding->{severity} = 2;

			print IOUT ivil_finding($finding);
		}

		# Errors
		@warnings = $p->look_down('class','reportSection')->look_down('class','errorBox');
		if (@warnings) {
			$finding->{id} = "errors";
			my $txt = "";
			foreach my $warning ( @warnings ) {
				$txt .= $warning->as_text() . "\n" unless $warning->as_text() =~ /^ Due to a rectently discovered bug in Apple/;
			}
			$txt =~ s/[\xA0-\xFF]/ /g;
			$txt =~ s/MORE INFO/ /g;
			$finding->{finding} = $txt;
			$finding->{severity} = 1;

			print IOUT ivil_finding($finding);
		}
		#info
		@warnings = $p->look_down('class','highlightBox');
		if (@warnings) {
			$finding->{id} = "info";
			my $txt = "";
			foreach my $warning ( @warnings ) {
				$txt .= $warning->as_text() . "\n";
			}
			$txt =~ s/[\xA0-\xFF]/ /g;
			$txt =~ s/MORE INFO/ /g;
			$finding->{finding} = $txt;
			$finding->{severity} = 4;

			print IOUT ivil_finding($finding);
		}


		my $file = "$tempfile.$url.html";
		$tempfile =~ s/\&/\-/g;

		# HTML file
		$txt = $hosts{$url}->{data};
		$txt =~ s/src\=\'\//src='https:\/\/www.ssllabs.com\//g;
		$txt =~ s/src\=\"\//src="https:\/\/www.ssllabs.com\//g;
		$txt =~ s/href\=\'\//href='https:\/\/www.ssllabs.com\//g;
		$txt =~ s/href\=\"\//href="https:\/\/www.ssllabs.com\//g;
		open HTML, ">$file" or die "Unable to open '$file' for write";
		print HTML $txt;
		close HTML;
		
		# Cleanup
		$p->delete;
	} else {
		print "Skipping not processed url: $url\n" if $verbose;
		$finding->{id} = "skipped";
		if ( $hosts{$url}->{status} == 3 ) { 
			$finding->{finding} = "$url was expanded to multiple IPs";
		} else {
			$finding->{finding} = "$url was skipped due to an error";
		}
		print IOUT ivil_finding($finding);
	}
}
print IOUT "</findings>\n";
print IOUT ivil_close();
close IOUT;

my $cmd = "$load_ivil --workspace '$workspace' --scan '$scan' --scanner SSLlabs --timestamp $timestamp";
$cmd .= " -v" if $verbose > 1;
$cmd .= " '$tempfile.ivil.xml'";
print "Execuing $cmd\n" if $verbose > 1;
my $result = `$cmd 2>&1`;
print "$result\n" if $verbose > 1;

# attach HTML
print "Scan imported, adding files to scan $scan in workspace $workspace\n" unless $quiet;
foreach my $file ( <$tempfile*.html> ) {
	$cmd = "$attach_file --workspace '$workspace' --scan '$scan' --timestamp $timestamp --file '$file' --description 'HTML output'";
	$cmd .= " -v" if $verbose > 1;
	print "Execuing $cmd\n" if $verbose > 1;
	$result = `$cmd 2>&1`;
	print "$result\n" if $verbose > 1;
}

print "Scan imported, adding files to scan $scan in workspace $workspace\n" unless $quiet;
$cmd = "$attach_file --workspace '$workspace' --scan '$scan' --timestamp $timestamp --file '$tempfile.ivil.xml' --description 'IVIL output'";
$cmd .= " -v" if $verbose > 1;
print "Execuing $cmd\n" if $verbose > 1;
$result = `$cmd 2>&1`;
print "$result\n" if $verbose > 1;

# Cleanup
unless ( $nodelete ) {
	foreach my $file ( <$tempfile*.html> ) {
		unlink "$file";
	}
	unlink "$tempfile.ivil.xml" if -e "$tempfile.ivil.xml";
}

exit(0);

sub help() {
	print "

Usage: scan 	--hosts <hosts file> --workspace <workspace> --scan <scan> [--verbose|v] 
		[--quiet|q] [--help|h]

Arguments:
--hosts		- The file containing the 'hosts' to scan
--workspace	- Name of the workspace to load the findings into
--scan		- Name of the scan to load the findings into
--verbose (-v)	- Be verbose during execution
--nodelete	- Don't delete temporary files
--quiet (-q)	- Don't print output
--help (-h)	- Print this message
";
	exit(1);
}

sub make_timestamp() {
	my ($second, $minute, $hour, $day, $month, $year) = localtime();
	$month++;
	$second = "0" . $second if $second < 10;
	$minute = "0" . $minute if $minute <10;
	$hour = "0". $hour if $hour < 10;
	$day = "0". $day if $day <10;
	$month = "0" . $month if $month <10;
	$year += 1900;

	return "$year$month$day$hour$minute$second";
}

