version: 2
jobs:

  cache_perl:
    docker:
      - image: alpine:latest
        environment:
        - PERL5LIB: "."
    steps:
      - run:
          name: Install prerequisites
          command: |
            apk --no-progress update ;
            apk --no-progress add git openssh-client wget linux-headers perl-dev perl-app-cpanminus gcc libc-dev make \
            perl-algorithm-diff perl-carp perl-dbd-mysql perl-dbi perl-data-dumper perl-date-format perl-exporter \
            perl-html-parser perl-json perl-libwww perl-lwp-protocol-https perl-mojolicious perl-net-ip \
            perl-term-readkey perl-xml-simple perl-module-build perl-module-pluggable perl-test-weaken \
            perl-config-tiny perl-exception-class perl-test-deep perl-readonly perl-file-which \
            perl-list-moreutils perl-params-util perl-class-inspector perl-file-remove perl-clone perl-class-tiny \
            perl-path-tiny perl-type-tiny perl-module-runtime perl-namespace-autoclean perl-moo perl-strictures \
            perl-digest-hmac perl-task-weaken
      - checkout
      - restore_cache:
          key: cpanm-{{ checksum "Makefile.PL" }}-v3
      - run: cpanm --notest TAP::Harness::JUnit
      - run: cpanm --installdeps --notest .
      - save_cache:
          key: cpanm-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - "/usr/local/lib/perl5/site_perl"
            - "/usr/local/share/perl5/site_perl"
      - save_cache:
          key: cpanm-{{ checksum "Makefile.PL" }}-v3
          paths:
            - "/usr/local/lib/perl5/site_perl"
            - "/usr/local/share/perl5/site_perl"

  unit_tests:
    docker:
      - image: alpine:latest
        environment:
        - PERL5LIB: "."
        - MYSQL_HOME: "/root/project/.circleci"

      - image: circleci/mysql:5

    parallelism: 2

    steps:
      - run:
          name: Install prerequisites
          command: |
            apk --no-progress update ;
            apk --no-progress add git openssh-client wget linux-headers perl-dev perl-app-cpanminus gcc libc-dev make \
            perl-algorithm-diff perl-carp perl-dbd-mysql perl-dbi perl-data-dumper perl-date-format perl-exporter \
            perl-html-parser perl-json perl-libwww perl-lwp-protocol-https perl-mojolicious perl-net-ip \
            perl-term-readkey perl-xml-simple perl-module-build perl-module-pluggable perl-test-weaken \
            perl-config-tiny perl-exception-class perl-test-deep perl-readonly perl-file-which \
            perl-list-moreutils perl-params-util perl-class-inspector perl-file-remove perl-clone perl-class-tiny \
            perl-path-tiny perl-type-tiny perl-module-runtime perl-namespace-autoclean perl-moo perl-strictures \
            perl-digest-hmac perl-task-weaken perl-test-harness perl-test-harness-utils bash mysql-client zip file \
            bind-tools
      - checkout
      - restore_cache:
          key: cpanm-{{ .Environment.CIRCLE_SHA1 }}
      - run: cpanm --notest TAP::Harness::JUnit
      - run: cpanm --installdeps --notest .
      - run:
          name: Wait for database
          command: |
            bash -c "while ! echo -n > /dev/tcp/127.0.0.1/3306; do
              sleep 1
              echo -n .
            done"
      - run:
          name: Create database(s)
          command: |
            mysql -e "create database seccubus"
            mysql -e "create database seccubus_create"
            mysql -e "create database seccubus_upgrade"
      - run: if [ -e .git/shallow ]; then git fetch --unshallow; fi
      - run:
          name: Unit test
          command: circleci tests glob t/[012345678]* | circleci tests split --split-by=timings --timings-type=classname | xargs prove --harness TAP::Harness::JUnit
      - run:
          name: Rename unit tests cache
          command: |
            sed -i.bak -e 's/"t_/"t\//g; s/_t"/\.t"/g' junit_output.xml
            mkdir testout
            mv junit_output.xml testout/junit_$CIRCLE_NODE_INDEX.xml
      - save_cache:
          key: junit-{{ .Environment.CIRCLE_NODE_INDEX }}-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - "/root/project/testout"
      - store_artifacts:
          path: /root/project/testout/
      - store_test_results:
          path: /root/project/testout/

  ssllabs:
    docker:
      - image: alpine:latest
        environment:
        - PERL5LIB: "."
        - MYSQL_HOME: "/root/project/.circleci"

      - image: circleci/mysql:5

    parallelism: 1

    steps:
      - run:
          name: Install prerequisites
          command: |
            apk --no-progress update ;
            apk --no-progress add git openssh-client wget linux-headers perl-dev perl-app-cpanminus gcc libc-dev make \
            perl-algorithm-diff perl-carp perl-dbd-mysql perl-dbi perl-data-dumper perl-date-format perl-exporter \
            perl-html-parser perl-json perl-libwww perl-lwp-protocol-https perl-mojolicious perl-net-ip \
            perl-term-readkey perl-xml-simple perl-module-build perl-module-pluggable perl-test-weaken \
            perl-config-tiny perl-exception-class perl-test-deep perl-readonly perl-file-which \
            perl-list-moreutils perl-params-util perl-class-inspector perl-file-remove perl-clone perl-class-tiny \
            perl-path-tiny perl-type-tiny perl-module-runtime perl-namespace-autoclean perl-moo perl-strictures \
            perl-digest-hmac perl-task-weaken perl-test-harness perl-test-harness-utils bash mysql-client zip file \
            bind-tools
      - checkout
      - restore_cache:
          key: cpanm-{{ .Environment.CIRCLE_SHA1 }}
      - run: cpanm --notest TAP::Harness::JUnit
      - run: cpanm --installdeps --notest .
      - run:
          name: Wait for database
          command: |
            bash -c "while ! echo -n > /dev/tcp/127.0.0.1/3306; do
              sleep 1
              echo -n .
            done"
      - run:
          name: Create database(s)
          command: |
            mysql -e "create database seccubus"
            mysql -e "create database seccubus_create"
            mysql -e "create database seccubus_upgrade"
      - run: if [ -e .git/shallow ]; then git fetch --unshallow; fi
      - run:
          name: Unit test
          command: circleci tests glob t/90* | circleci tests split --split-by=timings --timings-type=classname | xargs prove --harness TAP::Harness::JUnit
      - run:
          name: Rename unit tests cache
          command: |
            sed -i.bak -e 's/"t_/"t\//g; s/_t"/\.t"/g' junit_output.xml
            mkdir testout
            mv junit_output.xml testout/junit_ssllabs.xml
      - save_cache:
          key: junit-ssllabs-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - "/root/project/testout"
      - store_artifacts:
          path: /root/project/testout/
      - store_test_results:
          path: /root/project/testout/

  testssl:
    docker:
      - image: alpine:latest
        environment:
        - PERL5LIB: "."
        - MYSQL_HOME: "/root/project/.circleci"

      - image: circleci/mysql:5

    parallelism: 1

    steps:
      - run:
          name: Install prerequisites
          command: |
            apk --no-progress update ;
            apk --no-progress add git openssh-client wget linux-headers perl-dev perl-app-cpanminus gcc libc-dev make \
            perl-algorithm-diff perl-carp perl-dbd-mysql perl-dbi perl-data-dumper perl-date-format perl-exporter \
            perl-html-parser perl-json perl-libwww perl-lwp-protocol-https perl-mojolicious perl-net-ip \
            perl-term-readkey perl-xml-simple perl-module-build perl-module-pluggable perl-test-weaken \
            perl-config-tiny perl-exception-class perl-test-deep perl-readonly perl-file-which \
            perl-list-moreutils perl-params-util perl-class-inspector perl-file-remove perl-clone perl-class-tiny \
            perl-path-tiny perl-type-tiny perl-module-runtime perl-namespace-autoclean perl-moo perl-strictures \
            perl-digest-hmac perl-task-weaken perl-test-harness perl-test-harness-utils bash mysql-client zip file \
            bind-tools
      - checkout
      - restore_cache:
          key: cpanm-{{ .Environment.CIRCLE_SHA1 }}
      - run: cpanm --notest TAP::Harness::JUnit
      - run: cpanm --installdeps --notest .
      - run:
          name: Wait for database
          command: |
            bash -c "while ! echo -n > /dev/tcp/127.0.0.1/3306; do
              sleep 1
              echo -n .
            done"
      - run:
          name: Create database(s)
          command: |
            mysql -e "create database seccubus"
            mysql -e "create database seccubus_create"
            mysql -e "create database seccubus_upgrade"
      - run: if [ -e .git/shallow ]; then git fetch --unshallow; fi
      - run:
          name: Unit test
          command: circleci tests glob t/91* | circleci tests split --split-by=timings --timings-type=classname | xargs prove --harness TAP::Harness::JUnit
      - run:
          name: Rename unit tests cache
          command: |
            sed -i.bak -e 's/"t_/"t\//g; s/_t"/\.t"/g' junit_output.xml
            mkdir testout
            mv junit_output.xml testout/junit_testssl.xml
      - save_cache:
          key: junit-testssl-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - "/root/project/testout"
      - store_artifacts:
          path: /root/project/testout/
      - store_test_results:
          path: /root/project/testout/

  build:
    docker:
      - image: alpine:latest
        environment:
        - PERL5LIB: "."
    steps:
      - run:
          name: Install prerequisites
          command: |
            apk --no-progress update ;
            apk --no-progress add git openssh-client wget linux-headers perl-dev perl-app-cpanminus gcc libc-dev make \
            perl-algorithm-diff perl-carp perl-dbd-mysql perl-dbi perl-data-dumper perl-date-format perl-exporter \
            perl-html-parser perl-json perl-libwww perl-lwp-protocol-https perl-mojolicious perl-net-ip \
            perl-term-readkey perl-xml-simple perl-module-build perl-module-pluggable perl-test-weaken \
            perl-config-tiny perl-exception-class perl-test-deep perl-readonly perl-file-which \
            perl-list-moreutils perl-params-util perl-class-inspector perl-file-remove perl-clone perl-class-tiny \
            perl-path-tiny perl-type-tiny perl-module-runtime perl-namespace-autoclean perl-moo perl-strictures \
            perl-digest-hmac perl-task-weaken \
            openjdk7-jre bash
      - checkout
      - restore_cache:
          key: cpanm-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: Build
          command: ./build_all
      - store_artifacts:
          path: /root/project/build/
      - restore_cache:
          key: junit-0-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          key: junit-1-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          key: junit-2-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          key: junit-3-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          key: junit-ssllabs-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          key: junit-testssl-{{ .Environment.CIRCLE_SHA1 }}
      - store_test_results:
          path: /root/project/testout/
      - store_artifacts:
          path: /root/project/testout/

  build_deb:
    docker:
      - image: debian:9
        environment:
        - PERL5LIB: "."

    steps:
      - run: apt-get update; apt-get install -y git ssh
      - checkout
      - run:
          name: Generate build signature
          command: echo $CIRCLE_SHA1 > .git-describe
      - run:
          name: Install prerequisite packages
          command: apt-get update; apt-get -y install build-essential debhelper default-jre-headless git debsigs
      - run:
          name: Build
          command: deb/makedeb.sh
      - save_cache:
          key: deb-{{ .Branch }}-{{ checksum ".git-describe" }}
          paths:
            - "/root/project/build"
      - store_artifacts:
          path: /root/project/build/

  debian8_test:
    docker:
      - image: debian:8

    steps:
      - run: debconf-set-selections <<< 'mysql-server mysql-server/root_password password your_password'
      - run: debconf-set-selections <<< 'mysql-server mysql-server/root_password_again password your_password'
      - run: apt-get update; apt-get install -y ca-certificates curl
      - run:
          name: Generate build signature
          command: echo $CIRCLE_SHA1 > .git-describe
      - restore_cache:
          key: deb-{{ .Branch }}-{{ checksum ".git-describe" }}
      - run:
          name: Install package (shoud fail)
          shell: bash -ex
          command: if dpkg -i /root/project/build/*.deb; then echo "NOT ok"; exit 99; else echo "OK" ; fi
      - run:
          name: Install failed packages (shoud work)
          command: apt-get install -f -y
      - run:
          name: Seccubus should be running on port 8443
          command: echo -n >/dev/tcp/localhost/8443
      - run:
          name: Seccubus should answer to call to api/appstatus
          command: curl --connect-timeout 10 https://127.0.0.1:8443/api/appstatus -k

  debian9_test:
    docker:
      - image: debian:9

    steps:
      - run: apt-get update; apt-get install -y ca-certificates curl
      - run:
          name: Generate build signature
          command: echo $CIRCLE_SHA1 > .git-describe
      - restore_cache:
          key: deb-{{ .Branch }}-{{ checksum ".git-describe" }}
      - run:
          name: Install package (shoud fail)
          shell: bash -ex
          command: if dpkg -i /root/project/build/*.deb; then echo "NOT ok"; exit 99; else echo "OK" ; fi
      - run:
          name: Install failed packages (shoud work)
          command: apt-get install -f -y
      - run:
          name: Seccubus should be running on port 8443
          command: echo -n >/dev/tcp/localhost/8443
      - run:
          name: Seccubus should answer to call to api/appstatus
          command: curl --connect-timeout 10 https://127.0.0.1:8443/api/appstatus -k

  kali_test:
    docker:
      - image: kalilinux/kali-linux-docker:latest

    steps:
      - run: apt-get update; apt-get install -y ca-certificates curl
      - run:
          name: Generate build signature
          command: echo $CIRCLE_SHA1 > .git-describe
      - restore_cache:
          key: deb-{{ .Branch }}-{{ checksum ".git-describe" }}
      - run:
          name: Install package (shoud fail)
          shell: bash -ex
          command: if dpkg -i /root/project/build/*.deb; then echo "NOT ok"; exit 99; else echo "OK" ; fi
      - run:
          name: Install failed packages (shoud work)
          command: apt-get install -f -y
      - run:
          name: Seccubus should be running on port 8443
          command: echo -n >/dev/tcp/localhost/8443
      - run:
          name: Seccubus should answer to call to api/appstatus
          command: curl --connect-timeout 10 https://127.0.0.1:8443/api/appstatus -k

  ubuntu14_test:
    docker:
      - image: ubuntu:14.04

    steps:
      - run: debconf-set-selections <<< 'mysql-server mysql-server/root_password password your_password'
      - run: debconf-set-selections <<< 'mysql-server mysql-server/root_password_again password your_password'
      - run: apt-get update; apt-get install -y ca-certificates curl
      - run:
          name: Generate build signature
          command: echo $CIRCLE_SHA1 > .git-describe
      - restore_cache:
          key: deb-{{ .Branch }}-{{ checksum ".git-describe" }}
      - run:
          name: Install package (shoud fail)
          shell: bash -ex
          command: if dpkg -i /root/project/build/*.deb; then echo "NOT ok"; exit 99; else echo "OK" ; fi
      - run:
          name: Install failed packages (shoud work)
          command: apt-get install -f -y
      - run:
          name: Seccubus should be running on port 8443
          command: echo -n >/dev/tcp/localhost/8443
      - run:
          name: Seccubus should answer to call to api/appstatus
          command: curl --connect-timeout 10 https://127.0.0.1:8443/api/appstatus -k

  ubuntu16_test:
    docker:
      - image: ubuntu:16.04

    steps:
      - run: apt-get update; apt-get install -y ca-certificates curl
      - run:
          name: Generate build signature
          command: echo $CIRCLE_SHA1 > .git-describe
      - restore_cache:
          key: deb-{{ .Branch }}-{{ checksum ".git-describe" }}
      - run:
          name: Install package (shoud fail)
          shell: bash -ex
          command: if dpkg -i /root/project/build/*.deb; then echo "NOT ok"; exit 99; else echo "OK" ; fi
      - run:
          name: Install failed packages (shoud work)
          command: apt-get install -f -y
      - run:
          name: Seccubus should be running on port 8443
          command: echo -n >/dev/tcp/localhost/8443
      - run:
          name: Seccubus should answer to call to api/appstatus
          command: curl --connect-timeout 10 https://127.0.0.1:8443/api/appstatus -k

  ubuntu17_test:
    docker:
      - image: ubuntu:17.10

    steps:
      - run: debconf-set-selections <<< 'mysql-server mysql-server/root_password password your_password'
      - run: debconf-set-selections <<< 'mysql-server mysql-server/root_password_again password your_password'
      - run: apt-get update; apt-get install -y ca-certificates curl
      - run:
          name: Generate build signature
          command: echo $CIRCLE_SHA1 > .git-describe
      - restore_cache:
          key: deb-{{ .Branch }}-{{ checksum ".git-describe" }}
      - run:
          name: Install package (shoud fail)
          shell: bash -ex
          command: if dpkg -i /root/project/build/*.deb; then echo "NOT ok"; exit 99; else echo "OK" ; fi
      - run:
          name: Install failed packages (shoud work)
          command: apt-get install -f -y
      - run:
          name: Seccubus should be running on port 8443
          command: echo -n >/dev/tcp/localhost/8443
      - run:
          name: Seccubus should answer to call to api/appstatus
          command: curl --connect-timeout 10 https://127.0.0.1:8443/api/appstatus -k

  ubuntu18_test:
    docker:
      - image: ubuntu:18.04

    steps:
      - run: debconf-set-selections <<< 'mysql-server mysql-server/root_password password your_password'
      - run: debconf-set-selections <<< 'mysql-server mysql-server/root_password_again password your_password'
      - run: apt-get update; apt-get install -y ca-certificates curl
      - run:
          name: Generate build signature
          command: echo $CIRCLE_SHA1 > .git-describe
      - restore_cache:
          key: deb-{{ .Branch }}-{{ checksum ".git-describe" }}
      - run:
          name: Install package (shoud fail)
          shell: bash -ex
          command: if dpkg -i /root/project/build/*.deb; then echo "NOT ok"; exit 99; else echo "OK" ; fi
      - run:
          name: Install failed packages (shoud work)
          command: apt-get install -f -y
      - run:
          name: Seccubus should be running on port 8443
          command: echo -n >/dev/tcp/localhost/8443
      - run:
          name: Seccubus should answer to call to api/appstatus
          command: curl --connect-timeout 10 https://127.0.0.1:8443/api/appstatus -k

  debian_ok:
    docker:
      - image: alpine
    steps:
      - run: apk update; apk add ca-certificates
      - run:
          name: Generate build signature
          command: echo $CIRCLE_SHA1 > .git-describe
      - restore_cache:
          key: deb-{{ .Branch }}-{{ checksum ".git-describe" }}
      - store_artifacts:
          path: /root/project/build

  debian_upload:
    docker:
      - image: alpine
    steps:
      - run:
          name: Installing prerequisites
          command: apk update; apk add alpine-sdk ruby-dev ruby
      - run:
          name: Generate build signature
          command: echo $CIRCLE_SHA1 > .git-describe
      - run:
          name: Setup package cloud
          command: gem install package_cloud -N
      - restore_cache:
          key: deb-{{ .Branch }}-{{ checksum ".git-describe" }}
      - run:
          name : Upload to packagecloud.io
          command: |
            package_cloud push seccubus/latest/debian/jessie build/*.deb
            package_cloud push seccubus/latest/debian/stretch build/*.deb
            package_cloud push seccubus/latest/ubuntu/trusty build/*.deb
            package_cloud push seccubus/latest/ubuntu/zesty build/*.deb
            package_cloud push seccubus/latest/ubuntu/artful build/*.deb
            package_cloud push seccubus/latest/ubuntu/bionic build/*.deb

  debian_upload_release:
    docker:
      - image: alpine
    steps:
      - run:
          name: Installing prerequisites
          command: apk update; apk add alpine-sdk ruby-dev ruby
      - run:
          name: Generate build signature
          command: echo $CIRCLE_SHA1 > .git-describe
      - run:
          name: Setup package cloud
          command: gem install package_cloud -N
      - restore_cache:
          key: deb-{{ .Branch }}-{{ checksum ".git-describe" }}
      - run:
          name : Upload to packagecloud.io
          command: |
            package_cloud push seccubus/releases/debian/jessie build/*.deb
            package_cloud push seccubus/releases/debian/stretch build/*.deb
            package_cloud push seccubus/releases/ubuntu/trusty build/*.deb
            package_cloud push seccubus/releases/ubuntu/zesty build/*.deb
            package_cloud push seccubus/releases/ubuntu/artful build/*.deb
            package_cloud push seccubus/releases/ubuntu/bionic build/*.deb

  build_fc28:
    docker:
      - image: fedora:28
    steps:
      - run: dnf install -y git
      - checkout
      - run:
          name: Generate build signature
          command: echo $CIRCLE_SHA1 > .git-describe
      - run:
          name: Install prerequisite packages
          command: dnf install -y fedora-packager fedora-review java-1.8.0-openjdk-headless "perl(ExtUtils::MakeMaker)" gpg rpm-sign make
      - run:
          name: Build
          command: rpm/makerpm.sh
      - save_cache:
          key: rpm-fc28-{{ .Branch }}-{{ checksum ".git-describe" }}
          paths:
            - "/root/project/build"
      - store_artifacts:
          path: /root/project/build/

  test_fc28:
    docker:
      - image: fedora:28
    steps:
      - run:
          name: Generate build signature
          command: echo $CIRCLE_SHA1 > .git-describe
      - restore_cache:
          key: rpm-fc28-{{ .Branch }}-{{ checksum ".git-describe" }}
      - run:
          name: Install rpm
          command: dnf install -y build/*fc28*rpm
      - run:
          name: Start hypnotoad
          command: cd /opt/seccubus; PERL5LIB=$PERL5LIB:. hypnotoad seccubus.pl
      - run:
          name: Seccubus should be running on port 8443
          command: echo -n >/dev/tcp/localhost/8443
      - run:
          name: Seccubus should answer to call to api/appstatus
          command: curl --connect-timeout 10 https://127.0.0.1:8443/api/appstatus -k

  build_fc29:
    docker:
      - image: fedora:29
    steps:
      - run: dnf install -y git
      - checkout
      - run:
          name: Generate build signature
          command: echo $CIRCLE_SHA1 > .git-describe
      - run:
          name: Install prerequisite packages
          command: dnf install -y fedora-packager fedora-review java-1.8.0-openjdk-headless "perl(ExtUtils::MakeMaker)" gpg rpm-sign make
      - run:
          name: Build
          command: rpm/makerpm.sh
      - save_cache:
          key: rpm-fc29-{{ .Branch }}-{{ checksum ".git-describe" }}
          paths:
            - "/root/project/build"
      - store_artifacts:
          path: /root/project/build/

  test_fc29:
    docker:
      - image: fedora:29
    steps:
      - run:
          name: Generate build signature
          command: echo $CIRCLE_SHA1 > .git-describe
      - restore_cache:
          key: rpm-fc29-{{ .Branch }}-{{ checksum ".git-describe" }}
      - run:
          name: Install rpm
          command: dnf install -y build/*fc29*rpm
      - run:
          name: Start hypnotoad
          command: cd /opt/seccubus; PERL5LIB=$PERL5LIB:. hypnotoad seccubus.pl
      - run:
          name: Seccubus should be running on port 8443
          command: echo -n >/dev/tcp/localhost/8443
      - run:
          name: Seccubus should answer to call to api/appstatus
          command: curl --connect-timeout 10 https://127.0.0.1:8443/api/appstatus -k

  build_el7:
    docker:
      - image: centos:7
    steps:
      - run: yum install -y git
      - checkout
      - run:
          name: Generate build signature
          command: echo $CIRCLE_SHA1 > .git-describe
      - run:
          name: Install prerequisite packages
          command: |
            yum install -y java-1.8.0-openjdk-headless "perl(ExtUtils::MakeMaker)" gpg rpm-sign rpm-build make \
            "perl(Test::Simple)" "perl(CPAN)" expect "perl(LWP::Protocol::https)"
      - run:
          name: Build
          command: rpm/makerpm.sh
      - save_cache:
          key: rpm-el7-{{ .Branch }}-{{ checksum ".git-describe" }}
          paths:
            - "/root/project/build"
      - store_artifacts:
          path: /root/project/build/

  test_el7:
    docker:
      - image: centos:7
    steps:
      - run:
          name: Generate build signature
          command: echo $CIRCLE_SHA1 > .git-describe
      - restore_cache:
          key: rpm-el7-{{ .Branch }}-{{ checksum ".git-describe" }}
      - run: ls -al build
      - run:
          name: Install rpm
          command: yum install -y epel-release && yum install -y build/*el7*rpm
      - run:
          name: Start hypnotoad
          command: cd /opt/seccubus; hypnotoad seccubus.pl
      - run:
          name: Seccubus should be running on port 8443
          command: echo -n >/dev/tcp/localhost/8443
      - run:
          name: Seccubus should answer to call to api/appstatus
          command: curl --connect-timeout 10 https://127.0.0.1:8443/api/appstatus -k

  el_ok:
    docker:
      - image: alpine
    steps:
      - run: apk update; apk add ca-certificates
      - run:
          name: Generate build signature
          command: echo $CIRCLE_SHA1 > .git-describe
      - restore_cache:
          key: rpm-el7-{{ .Branch }}-{{ checksum ".git-describe" }}
      - store_artifacts:
          path: /root/project/build
      - restore_cache:
          key: rpm-fc26-{{ .Branch }}-{{ checksum ".git-describe" }}
      - store_artifacts:
          path: /root/project/build
      - restore_cache:
          key: rpm-fc27-{{ .Branch }}-{{ checksum ".git-describe" }}
      - store_artifacts:
          path: /root/project/build
      - restore_cache:
          key: rpm-fc28-{{ .Branch }}-{{ checksum ".git-describe" }}
      - store_artifacts:
          path: /root/project/build

  el_upload:
    docker:
      - image: alpine
    steps:
      - run:
          name: Installing prerequisites
          command: apk update; apk add ca-certificates alpine-sdk ruby-dev ruby curl
      - run:
          name: Generate build signature
          command: echo $CIRCLE_SHA1 > .git-describe
      - run:
          name: Setup package cloud
          command: gem install package_cloud -N
      - restore_cache:
          key: rpm-el7-{{ .Branch }}-{{ checksum ".git-describe" }}
      - run:
          name : Upload to packagecloud.io
          command: package_cloud push seccubus/latest/el/7 build/*el7* --skip-errors
      - restore_cache:
          key: rpm-fc28-{{ .Branch }}-{{ checksum ".git-describe" }}
      - run:
          name : Upload to packagecloud.io
          command: package_cloud push seccubus/latest/fedora/28 build/*fc28*rpm
      - restore_cache:
          key: rpm-fc29-{{ .Branch }}-{{ checksum ".git-describe" }}
      - run:
          name : Upload to packagecloud.io
          command: package_cloud push seccubus/latest/fedora/29 build/*fc29*rpm

  el_upload_release:
    docker:
      - image: alpine
    steps:
      - run:
          name: Installing prerequisites
          command: apk update; apk add ca-certificates alpine-sdk ruby-dev ruby
      - run:
          name: Generate build signature
          command: echo $CIRCLE_SHA1 > .git-describe
      - run:
          name: Setup package cloud
          command: gem install package_cloud -N
      - restore_cache:
          key: rpm-el7-{{ .Branch }}-{{ checksum ".git-describe" }}
      - run:
          name : Upload to packagecloud.io - el7
          command: |
            cd build
            for file in *el7*rpm; do
              REMOTE=${file/.el7/}
              if [[ $(curl -I https://packagecloud.io/seccubus/releases/packages/el/7/$REMOTE|grep 404|wc -l) -eq 1 ]]; then
                package_cloud push seccubus/releases/el/7 $file
              else
                echo "$file already on packagecloud.io"
              fi
            done
            cd ..
      - restore_cache:
          key: rpm-fc26-{{ .Branch }}-{{ checksum ".git-describe" }}
      - run:
          name : Upload to packagecloud.io - fc26
          command: package_cloud push seccubus/releases/fedora/26 build/*fc26*rpm
      - restore_cache:
          key: rpm-fc27-{{ .Branch }}-{{ checksum ".git-describe" }}
      - run:
          name : Upload to packagecloud.io - fc27
          command: package_cloud push seccubus/releases/fedora/27 build/*fc27*rpm
      - restore_cache:
          key: rpm-fc28-{{ .Branch }}-{{ checksum ".git-describe" }}
      - run:
          name : Upload to packagecloud.io - fc28
          command: package_cloud push seccubus/releases/fedora/28 build/*fc28*rpm

workflows:

  version: 2

  unit_and_integration_tests:
    jobs:
      - cache_perl
      - unit_tests:
          requires:
            - cache_perl
      - ssllabs:
          requires:
            - cache_perl
          filters:
            branches:
              only:
                - master
                - releases
                - ssllabs
      - testssl:
          requires:
            - cache_perl
          filters:
            branches:
              only:
                - master
                - releases
                - testssl
      - build:
          requires:
            - unit_tests
            - ssllabs
            - testssl

  debian_package_building:
    jobs:
      - build_deb:
          filters:
            branches:
              only:
                - master
                - releases
                - deb-building
      - debian9_test:
          requires:
            - build_deb
          filters:
            branches:
              only:
                - master
                - releases
                - deb-building
      - debian8_test:
          requires:
            - build_deb
          filters:
            branches:
              only:
                - master
                - releases
                - deb-building
      - ubuntu14_test:
          requires:
            - build_deb
          filters:
            branches:
              only:
                - master
                - releases
                - deb-building
      - ubuntu16_test:
          requires:
            - build_deb
          filters:
            branches:
              only:
                - master
                - releases
                - deb-building
      - ubuntu17_test:
          requires:
            - build_deb
          filters:
            branches:
              only:
                - master
                - releases
                - deb-building
      - ubuntu18_test:
          requires:
            - build_deb
          filters:
            branches:
              only:
                - master
                - releases
                - deb-building
      - kali_test:
          requires:
            - build_deb
          filters:
            branches:
              only:
                - master
                - releases
                - deb-building
      - debian_ok:
          requires:
            - debian8_test
            - debian9_test
            - ubuntu14_test
            - ubuntu16_test
            - ubuntu17_test
            - ubuntu18_test
            - kali_test
          filters:
            branches:
              only:
                - master
                - releases
                - deb-building
      - debian_upload:
          requires:
            - debian_ok
          filters:
            branches:
              only:
                - master
      - debian_upload_release:
          requires:
            - debian_ok
          filters:
            branches:
              only:
                - releases

  el_package_building:
    jobs:
      - build_el7:
          filters:
            branches:
              only:
                - master
                - releases
                - rpm-build
      - test_el7:
          requires:
            - build_el7
          filters:
            branches:
              only:
                - master
                - releases
                - rpm-build

      - build_fc28:
          filters:
            branches:
              only:
                - master
                - releases
                - rpm-build
      - test_fc28:
          requires:
            - build_fc28
          filters:
            branches:
              only:
                - master
                - releases
                - rpm-build
      - build_fc29:
          filters:
            branches:
              only:
                - master
                - releases
                - rpm-build
      - test_fc29:
          requires:
            - build_fc29
          filters:
            branches:
              only:
                - master
                - releases
                - rpm-build
      - el_ok:
          requires:
            - test_el7
            - test_fc28
            - test_fc29
          filters:
            branches:
              only:
                - master
                - releases
                - rpm-build
      - el_upload:
          requires:
            - el_ok
          filters:
            branches:
              only:
                - master
      - el_upload_release:
          requires:
            - el_ok
          filters:
            branches:
              only:
                - releases
